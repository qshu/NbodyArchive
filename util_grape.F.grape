C--------------------------------------------------------------------
C     Open the local GRAPE
C--------------------------------------------------------------------
      SUBROUTINE OPEN_THE_GRAPE

      INCLUDE 'common6.h'
      INCLUDE 'common_grape.h'
      
C---  open GRAPE and set some parameters

      g6_calls = 0.0

      CALL g6_open(clusterid)
      
c      WRITE(6,*) 'OPEN start', RANK, clusterid
      

      npmax = g6_npipes()

c      WRITE(6,*) 'OPEN start', RANK, npmax

      
CCC      IF(npmax.NE.NPIPE) WRITE(STDOUT,*) '!!! NPIPE is NOT 48 !!!'
CCC      CALL flush(STDOUT)
      
      IF(ipipe.GT.npmax) ipipe = npmax
      
      np_use = ipipe

c      WRITE(6,*) 'OPEN start', RANK, np_use, ipipe, npmax


      
      CALL g6_set_tunit(new_tunit)
      CALL g6_set_xunit(new_xunit)

      CALL g6_set_overflow_flag_test_mode(aflag, jflag, pflag)

      tmp_i = g6_set_neighbour_list_sort_mode(nflag)

C---  open GRAPE and set some parameters
      
      RETURN
      END
C--------------------------------------------------------------------
C     Open the local GRAPE
C--------------------------------------------------------------------

C--------------------------------------------------------------------
C     Close the local GRAPE
C--------------------------------------------------------------------
      SUBROUTINE CLOSE_THE_GRAPE

      INCLUDE 'common6.h'
      INCLUDE 'common_grape.h'
            
C---  close the GRAPE

      CALL g6_close(clusterid) 

C---  close the GRAPE
      
      RETURN
      END
C--------------------------------------------------------------------
C     Open the local GRAPE
C--------------------------------------------------------------------

C--------------------------------------------------------------------
C     Set the ALL particles on local GRAPE memory
C--------------------------------------------------------------------
      SUBROUTINE SET_ALL_PART_ON_GRAPE

      INCLUDE 'common6.h'
      INCLUDE 'common_grape.h'
            
C---  SET the particles on local GRAPE memory

      tj0  = 0.0
      dtj0 = 2.0**(-25)
      
C      DO j=1,N
C         tj(j)  = 0.0
C         dtj(j) = 2.0**(-25)
C      ENDDO					! j
 
      DO k=1,ID
         a2by18(k) = 0.0
         a1by6(k)  = 0.0 
         aby2(k)   = 0.0
      ENDDO					! k

c      WRITE(6,*) 'SETALL start', RANK, IFIRST, NTOT, ID, 
c     &BODY(IFIRST), X(1,IFIRST), XDOT(1,IFIRST), 
c     &BODY(NTOT), X(1,NTOT), XDOT(1,NTOT)

      DO j=IFIRST,NTOT

         CALL g6_set_j_particle(clusterid, j-IFIRST, NAME(j),
     &   tj0, dtj0,
     &   BODY(j),
     &   a2by18(1), a1by6(1), aby2(1),
     &   XDOT(1,j), X(1,j)) 

      ENDDO					! j
      
      RETURN
      END
C--------------------------------------------------------------------
C     Set the ALL particles on local GRAPE memory
C--------------------------------------------------------------------

C--------------------------------------------------------------------
C     Set the ACT particles on local GRAPE memory
C--------------------------------------------------------------------
      SUBROUTINE SET_ACT_PART_ON_GRAPE(IREG,NREG)

      INCLUDE 'common6.h'
      INCLUDE 'common_grape.h'

      INTEGER*4 IREG(NMAX), NREG

            
C---  SET the particles on local GRAPE memory

      tj0  = 0.0
      dtj0 = 2.0**(-25)
      
C      DO j=1,N
C         tj(j)  = 0.0
C         dtj(j) = 2.0**(-25)
C      ENDDO					! j
 
      DO k=1,ID
         a2by18(k) = 0.0
         a1by6(k)  = 0.0 
         aby2(k)   = 0.0
      ENDDO					! k


      DO L=1,NREG

         j=IREG(L)

         CALL g6_set_j_particle(clusterid, j-IFIRST, NAME(j),
     &   tj0, dtj0,
     &   BODY(j),
     &   a2by18(1), a1by6(1), aby2(1),
     &   XDOT(1,j), X(1,j)) 

      ENDDO					! L

      
      RETURN
      END
C--------------------------------------------------------------------
C     Set the ACT particles on local GRAPE memory
C--------------------------------------------------------------------

C--------------------------------------------------------------------
C     Calculate the REG force on local GRAPE memory
C--------------------------------------------------------------------
      SUBROUTINE CALC_REG_ON_GRAPE(IREG,istart,iend)

      INCLUDE 'common6.h'
      INCLUDE 'common_grape.h'

      INTEGER*4 IREG(NMAX), istart, iend, LIST_M(NMAX)
      INTEGER*4 LIST_G(LMAX,NMAX)

C      REAL*8 pot_reg_g6a(NMAX)
C      REAL*8 a_reg_g6a(ID,NMAX)
C      REAL*8 adot_reg_g6a(ID,NMAX)


c      WRITE(6,*) 'REG start', RANK, istart, iend


C---  setting the GRAPE time to ti

      ti = 0.0

      CALL g6_set_ti(clusterid, ti)


      eps2_g6a = 0.0*0.0
      h2_g6a   = 0.1*0.1



C---  calculate the pot, a & jerk on the GRAPE

      DO L=istart,iend,np_use

         i=IREG(L)

c      WRITE(6,*) 'LOOP REG', RANK, L, i, LIST(1,i)


         nn = np_use
         IF( (L+nn).GT.iend ) nn = iend - L + 1



CCC   CALL NBMERGE!!!	Present version LIST_M == LIST

        LIST_M(1) = LIST(1,i)

        DO tmp_i=1,LIST(1,i)
           LIST_M(tmp_i+1) = LIST(tmp_i+1,i)
        ENDDO




C---  load the 0 masses for the "i" particle neighbours on the local GRAPE's 

        tmp = 0.0D0

        DO tmp_i=1,LIST_M(1)

          j = LIST_M(tmp_i+1)

CCC          CALL g6_set_j_particle_mxonly(clusterid, j-IFIRST, NAME(j), 
CCC     &                                 tmp, X(1,j))

C          tj(j)  = 0.0
C          dtj(j) = 2.0**(-25)

          tj0  = 0.0D0
          dtj0 = 2.0D0**(-25)
 
          DO k=1,ID
            a2by18(k) = 0.0D0
            a1by6(k)  = 0.0D0 
            aby2(k)   = 0.0D0
          ENDDO					! k
     
         CALL g6_set_j_particle(clusterid, j-IFIRST, NAME(j),
     &   tj0, dtj0,
     &   tmp,
     &   a2by18(1), a1by6(1), aby2(1),
     &   XDOT(1,j), X(1,j)) 

        ENDDO					! j




C---  fill the GRAPE "working" arrays

      DO ii = 1, npmax
      h2_i(ii) = 0.0
      END DO


         DO ii=1,nn

         idi       = i+ii-1
         ind_i(ii) = NAME(idi)

CCC      Obtain irregular & regular force and determine current neighbours.
CCC      Take volume between inner and outer radius equal to basic sphere.
CCC      RS2      = RS(idi)**2
CCC      h2_i(ii) = 1.59*RS2

         h2_i(ii) = RS(idi)**2

C      WRITE(6,*) RANK, 'GRAPE UTIL h2', ii-1, idi, sqrt(h2_i(ii)), 
C     &NAME(idi), LIST(1,idi)

         DO k=1,3
            x_i(k,ii) = X(k,idi)
            v_i(k,ii) = XDOT(k,idi)
         ENDDO				! k

         p_i(ii) = PHIDBL(idi)

         DO k=1,3
            a_i(k,ii)    = 2.0*F(k,idi)
            jerk_i(k,ii) = 6.0*FDOT(k,idi)
         ENDDO				! k

         ENDDO					! ii


      DO ii = 2, npmax

         DO k=1,3
            x_i(k,ii) = X(k,i)
         ENDDO				! k
      
      END DO




CCC      WRITE(6,*) ii-1, idi, h2_i(48), NAME(idi)


C---  GRAPE first call with first values of p_i, a_i & jerk_i

        CALL g6calc_firsthalf(clusterid, N, nn, ind_i, 
     &	               x_i, v_i,
     &                 a_i, jerk_i, p_i, eps2_g6a, h2_i)


        CALL g6calc_lasthalf(clusterid, N, nn, ind_i, 
     &                 x_i, v_i,
     &                 eps2_g6a, h2_i, a_i, jerk_i, p_i)


        g6_calls = g6_calls + 1.0


C---  before second GRAPE call "correct" the 0.0 jerk values

C        IF(jerk_i(1,ii).EQ.0.0) jerk_i(1,ii) = 1.0E-05
C        IF(jerk_i(2,ii).EQ.0.0) jerk_i(2,ii) = 1.0E-05
C        IF(jerk_i(3,ii).EQ.0.0) jerk_i(3,ii) = 1.0E-05


C---  GRAPE second call with new values of p_i, a_i & jerk_i

C        CALL g6calc_firsthalf(clusterid, N, nn, ind_i, 
C     &	               x_i, v_i,
C     &                 a_i, jerk_i, p_i, eps2_g6a, h2_i)


C        CALL g6calc_lasthalf(clusterid, N, nn, ind_i, 
C     &                 x_i, v_i,
C     &                 eps2_g6a, h2_i, a_i, jerk_i, p_i)




CCC#ifdef NBCALC

C---  read the i particles neighbours

        ret1 = g6_read_neighbour_list(clusterid)


CCC      WRITE(6,*) clusterid, ret1


        IF(ret1.EQ.0) THEN

          DO ii=1,nn

            ret2 = g6_get_neighbour_list(clusterid, ii-1, 
     &                                   nbm, nblen, nbl)

C      WRITE(6,*) clusterid, ret2, nbm, nblen

            IF(ret2.EQ.1) THEN
	    
	      WRITE(6,*) 'Length of NB list > LMAX'
              CALL flush(6);

C--- anyway read the nblist ???

              idi         = i+ii-1
              LIST_G(1,idi) = nblen
C              LIST_G(1,ii) = nblen

              DO k=1,nblen
                 LIST_G(k+1,idi) = nbl(k)
C                 LIST_G(k+1,ii) = nbl(k)		 
              ENDDO				! k

	      
	    ELSE

C--- read the nblist

              idi         = i+ii-1
              LIST_G(1,idi) = nblen
C              LIST_G(1,ii) = nblen

              DO k=1,nblen
                 LIST_G(k+1,idi) = nbl(k)
C                 LIST_G(k+1,ii) = nbl(k)		 
              ENDDO				! k

            ENDIF

	    
          ENDDO					! ii

        ELSE

          IF(ret1.GT.0) WRITE(6,*) 'NB list overflow in hardware'
          IF(ret1.LT.0) WRITE(6,*) 'NB list hardware error'
          CALL flush(6);

        ENDIF

C---  read the i particles neighbours

CCC#endif



C--- Double check the GRAPE nblist for particle "i" !!!

      RS2 = RS(i)**2

      DO tmp_i=1,LIST_G(1,i)

        j = LIST_G(tmp_i+1,i)

        tmp = ( X(1,i) - X(1,j) )**2 + 
     &	      ( X(2,i) - X(2,j) )**2 + 
     &	      ( X(3,i) - X(3,j) )**2

        IF(tmp.GT.RS2) THEN
	
      WRITE(6,*) 'NB list ', g6_calls, NAME(i), LIST_G(1,i), NAME(j), 
     &sqrt(tmp), sqrt(RS2), ((sqrt(tmp)-sqrt(RS2))/sqrt(RS2))
	
	ENDIF
	  
      ENDDO					! j
 




C---  get the pot, a & adot values from the GRAPE working arrays

        DO ii=1,nn

        idi      = i+ii-1
        PHIDBL(idi) = p_i(ii)

        DO k=1,3
           FRG(k,idi)    = a_i(k,ii)
           FRGDOT(k,idi) = jerk_i(k,ii)
        ENDDO				! k


c      WRITE(6,*) 'FORCE REG', RANK, ii, p_i(ii), a_i(1,ii), jerk_i(1,ii)


#ifndef PARALLEL

          DO 655 K = 1,LMAX
 655      IMPI(K,L) = LIST(K,idi)


C We after need to pass the correct LIST_G to regint!!!

          NBSUM = 0


       CALL REGINT(idi,IMPI(1,L))


         DO 615 K = 1,3
              F(K,idi) = 0.5D0*(FI(K,idi) + FR(K,idi))
              FDOT(K,idi) = ONE6*(FIDOT(K,idi) + FRDOT(K,idi))
  615    CONTINUE

#else

*       Start PARALLEL section for regint

      
          DO 656 K = 1,LMAX
 656      IMPI(K,L) = LIST(K,I)
*

       CALL REGINT(I,IMPI(1,L))

*
          YMPI(37,L) = STEPR(I)
          YMPI(38,L) = STEP(I)
          YMPI(39,L) = TIMENW(I)
          YMPI(40,L) = RS(I)
          YMPI(41,L) = T0R(I)
*
         DO 814 K = 1,3
              YMPI(K,L) = XN(K,I)
              YMPI(K+3,L) = XNDOT(K,I)
              YMPI(K+6,L) = FI(K,I)
              YMPI(K+9,L) = FR(K,I)
              YMPI(K+12,L) = FIDOT(K,I)
              YMPI(K+15,L) = FRDOT(K,I)
              YMPI(K+18,L) = D1R(K,I)
              YMPI(K+21,L) = D2R(K,I)
              YMPI(K+24,L) = D3R(K,I)
*       Save corrections of force polynomials from routine fpcorr
              IF (KZ(38).GT.0.OR.I.GT.N) THEN
              YMPI(K+27,L) = D1(K,I)
              YMPI(K+30,L) = D2(K,I)
              YMPI(K+33,L) = D3(K,I)
              END IF
  814    CONTINUE

#endif      
      


CCC        DO k=1,ID
CCC          X(k,idi) = XN(k,idi)
CCC          XDOT(k,idi) = XNDOT(k,idi)
CCC        ENDDO					! k


C       Correction of reg force list LIST_M & LIST


        ENDDO					! ii




C---  load back the masses for the "i" particle neighbours on the local GRAPE's 

        DO tmp_i=1,LIST_M(1)

          j = LIST_M(tmp_i+1)
          
C          CALL g6_set_j_particle_mxonly(clusterid, j-IFIRST, NAME(j), 
C     &                                 BODY(j), X0(1,j))
          
C          tj(j)  = 0.0
C          dtj(j) = 2.0**(-25)

          tj0  = 0.0
          dtj0 = 2.0**(-25)

          DO k=1,ID
            a2by18(k) = 0.0
            a1by6(k)  = 0.0 
            aby2(k)   = 0.0
          ENDDO					! k

         CALL g6_set_j_particle(clusterid, j-IFIRST, NAME(j),
     &   tj0, dtj0,
     &   BODY(j),
     &   a2by18(1), a1by6(1), aby2(1),
     &   XDOT(1,j), X(1,j)) 

        ENDDO					! j


      ENDDO					! i


      RETURN
      END

C--------------------------------------------------------------------
C     Calculate the REG force on local GRAPE memory
C--------------------------------------------------------------------
 