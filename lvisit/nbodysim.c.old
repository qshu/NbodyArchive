#include <stdlib.h>    
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <lvisit_nbody.h>

#define BENCH_TRACEno
#define BENCH_TRACE_PRE_no
#define BENCH_TRACE_X
#define BENCH_TRACE_Y
#define BENCH_TRACE_Z_no




#include <spkread.h>
#include <spkread.h>


#define data_particles_N0 -1
#define data_particles_N1 3
#define data_particles_N2 1
#define data_particles_N3 1


static double maxsize=3.25;
static double beginsize=0.25;
void nbodybenchparm_init(lvisit_wavelet_desc_t *desc,int *cnt,int *maxcnt, double *sizefactor);
void nbodybenchparm_advance(lvisit_wavelet_desc_t *desc,int *cnt,int *maxcnt, double *sizefactor);

static lvisit_wavelet_desc_t nbodybenchparm_particles; 
static int  nbodybenchparm_cnt_particles[15]; 
static int  nbodybenchparm_maxcnt_particles[15]; 
static double  nbodybenchparm_sizefactor_particles=1.0; 

/* program options */
int parm_iter;
int parm_startnr;
int parm_endnr;
int benchmarking;
double parm_factor;

/* generated by tw.pl */
#define TRACESIZENUM 80
int TRACEX[TRACESIZENUM];
/*   = {6,8,10,12,14, 16,18,20,22,24, 26,28,30,32, 6,8,10,12,14, 16,18,20,22,24, 26,28,30,32}; */
int TRACEY[TRACESIZENUM]; 
/*   = {4,6,8,10,12,14,16,18,20,22,24,26,28,30, 4,6,8,10,12,14,16,18,20,22,24,26,28,30}; */
int TRACEZ[TRACESIZENUM];
/*   = {10,10,10,10,10, 10,10,10,10,10, 10,10,10,10, 14,14,14,14,14, 14,14,14,14,14, 14,14,14,14}; */

void usage();

char* infilename;
void scan_program_options(int argc,char **argv);


/* --------------------------------------------------------------- */
int main(int argc,char **argv) {
   int iter;
/*     int sleeptime=2000000; */
   int sleeptime=200000;
/* int rc=0; */
   double *dummy;
	
    controlsim_t  data_controlsim = {
   -1,-1,-1,-1}
   ;
   char  filename_controlsim[256] /**/;
    int  filenr_controlsim=(1-1);
    steering_t  data_steering = {
   -1.0,-1.0,-1.0,-1.0,-1,-1,-1,-1}
   ;
   char  filename_steering[256] /**/;
    int  filenr_steering=(1-1);
    control_t  data_control = {
   -1,-1}
   ;
   char  filename_control[256] /**/;
    int  filenr_control=(1-1);
    info_t  data_info = {
   -1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0}
   ;
   char  filename_info[256] /**/;
    int  filenr_info=(1-1);
   
   
    unsigned long data_particles_nn[2];
    double  *data_particles_1=NULL;
    double  *data_particles_2=NULL;
    double  *data_particles_3=NULL;
    double  *data_particles_4=NULL;
    double  *data_particles_5=NULL;
    double  *data_particles_6=NULL;
    double  *data_particles_7=NULL;
    int     *data_particles_8=NULL;
    int     *data_particles_9=NULL;
    int  filenr_particles=(1-1);
    char  filename_particles[256];
   
   

   parm_iter=10;
   infilename="nbodytest";
   parm_startnr=1;
   parm_endnr=  100;
   parm_factor=  1.0;
   benchmarking=0;

   MPRINTF(("+-----------------------------------------------------------------------------+\n"));
   MPRINTF(("| CLIENT: starting simulation of %-40s     |\n","nbodysim"));
   MPRINTF(("+-----------------------------------------------------------------------------+\n"));

   scan_program_options(argc,argv);

    lvisit_nbody_init();
   

   if(benchmarking) {
     
   }

   /* Simulation loop */
   iter=0;
   while(iter<parm_iter) {
     MPRINTF(("+-----------------------------------------------------------------------------+\n"));
     MPRINTF(("| CLIENT: begin loop iterations #%-10d                                   |\n",iter));
     MPRINTF(("| CLIENT: sleeping #%10d us ...                                         |\n",sleeptime));
     MPRINTF(("+-----------------------------------------------------------------------------+\n"));
     usleep(sleeptime); 

     if(benchmarking) {
       
     }

     
     
     

      sprintf(filename_controlsim,"%s","test");
      
      
      sprintf(filename_steering,"%s","test");
      
      
      sprintf(filename_control,"%s","test");
      
      
      sprintf(filename_info,"%s","/home/zam/zdv087/data/treemp/wf_info.");
      
      
     
      if(filenr_particles<99) {filenr_particles++;} else {filenr_particles=1;}
      sprintf(filename_particles,"%s%06d","/home/zam/zdv087/data/treemp/wf_part.",filenr_particles);
      
      
      
      
       inspk_particles(&data_particles_1,&data_particles_2,&data_particles_3,
      		 &data_particles_4,&data_particles_5,&data_particles_6,
      		 &data_particles_7, &data_particles_8, &data_particles_9,
      		 data_particles_nn,filename_particles,filenr_particles);
      
      
      
     

      lvisit_nbody_check_connection();
     
      lvisit_nbody_controlsim_send(&data_controlsim);
      lvisit_nbody_info_send(&data_info);
     
     
     lvisit_nbody_particles_send( (double) filenr_particles,
     				data_particles_1,
     				data_particles_2,
     				data_particles_3,
     				data_particles_4,
     				data_particles_5,
     				data_particles_6,
     				data_particles_7,
     				data_particles_8,
     				data_particles_9,
     
     			   data_particles_nn[0]
     			   );
     
      lvisit_nbody_steering_recv(&data_steering);
      lvisit_nbody_control_recv(&data_control);
     
     

     if(benchmarking) {
       if((iter%1)==0) lvisit_nbody_check_drift();
     }

     iter++;
   }
    
   
    lvisit_nbody_close();
   

   MPRINTF(("----- ending  nbodysim, return code rc=0\n"));
   return(0);
}
/* --------------------------------------------------------------- */

void scan_program_options(int argc,char **argv) {
  int count;
    for(count=0;count<argc;count++) {
      if(argv[count][0]=='-') {
          switch(argv[count][1]) {
	      case 'i':
		  parm_iter=atoi(argv[++count]);
		  break;
	      case 's':
		  parm_startnr=atoi(argv[++count]);
		  break;
	      case 'e':
		  parm_endnr=atoi(argv[++count]);
		  break;
	      case 'x':
		  parm_factor=atof(argv[++count]);
		  break;
	      case 'b':
		  benchmarking=1;
		  break;
	      case 'f':
		  infilename=argv[count+1];
		  break;
	      case '?':
		  usage();
		  exit(0);
		  break;
	  }
      }
  }

  MPRINTF(("| CLIENT: Number of Iterations  %-10d                                    |\n",parm_iter));
  MPRINTF(("| CLIENT: Start Nr              %-10d                                    |\n",parm_startnr));
  MPRINTF(("| CLIENT: End Nr                %-10d                                    |\n",parm_endnr));
  MPRINTF(("| CLIENT: Exanpd factor         %-10.4f                                    |\n",parm_factor));
  MPRINTF(("+-----------------------------------------------------------------------------+\n"));
  
}

void usage() {
    fprintf(stderr,"Usage: nbodysim                                 \n");
    fprintf(stderr,"    -i <iter>                                  \n");
    fprintf(stderr,"    -s <startnumber>                           \n");
    fprintf(stderr,"    -e <endnumber>                             \n");
    fprintf(stderr,"    -b                       bechmarking       \n");
    fprintf(stderr,"    -x <factor for volumes>  e.g. 2,4,8,       \n");
    fprintf(stderr,"    -?  : print this usage help                \n");
}

void nbodybenchparm_init(lvisit_wavelet_desc_t *desc,int *cnt,int *maxcnt, double *sizefactor) {
  int i;
  for(i=0;i<10;i++) cnt[i]=0;
  cnt[0]=-1;

#define single
#ifdef mix  
#ifdef pgm
  maxsize=4603.0/1024.0;
  beginsize=503.0/1024.0;
#endif
#ifdef BENCH_TRACE
  maxsize=3.50;
  beginsize=0.50;
#endif

                                maxcnt[0]= 1;      /* loop */ 
                                maxcnt[1]= 1;      /* loop_wave */ 
  *sizefactor=1;                maxcnt[2]= TRACESIZENUM;     /* multiplicator for size of date */ 
  desc->cut=80.0;               maxcnt[3]= -5;     /* cut level in percent of #coefficents */
  desc->iterforward=1;          maxcnt[4]= -3;     /* number of wavelet iterations */
  desc->nquant=8;               maxcnt[5]= -3;     /* number of digits for quatization 8-32 */
  strcpy(desc->wtstep,"pwt2");  maxcnt[6]= -2;     /* name of wavelet algorithm */
  desc->quantfunction=0;        maxcnt[7]= -1;     /* 0=linear 1 log */
  desc->cutmethod=1;            maxcnt[8]= -2;     /* use histogram for cutting small coefficients */ 
  desc->quantcorr=1;            maxcnt[9]= -1;     /* calcultate weighted reconstruction values vor quantization */ 
  desc->type=1;                 maxcnt[10]=-2;     /* transfer type: 0->direct 1->wtncutqntcmp 2> progress */
#endif

#ifdef single
  maxsize=3.25;
  beginsize=0.7501;
                                maxcnt[0]= 1;      /* loop */ 
                                maxcnt[1]= 1;      /* loop_wave */ 
  *sizefactor=1;               maxcnt[2]=  -11;     /* multiplicator for size of date */ 
  desc->cut=0.0;               maxcnt[3]= -101;     /* cut level in percent of #coefficents */
  desc->iterforward=1;          maxcnt[4]= -3;     /* number of wavelet iterations */
  desc->nquant=8;               maxcnt[5]=  9;     /* number of digits for quatization 8-32 */
  strcpy(desc->wtstep,"pwt4");  maxcnt[6]=  -2;     /* name of wavelet algorithm */
  desc->quantfunction=0;        maxcnt[7]= -1;     /* 0=linear 1 log */
  desc->cutmethod=1;            maxcnt[8]= -2;     /* use histogram for cutting small coefficients */ 
  desc->quantcorr=1;            maxcnt[9]= -1;     /* calcultate weighted reconstruction values vor quantization */ 
  desc->type=1;                 maxcnt[10]= -2;     /* transfer type: 0->direct 1->wtncutqntcmp 2> progress */
#endif

  /* no benchmarking for this paramaters */
  desc->wtndebug=0;                   /* flag for visualization of wavelet coefficients */ 
  desc->size[0]=-1;			/* ? */
  desc->orig_size[0]=-1;                 /* size of original dataset */
  desc->active[0]=-1;                    /* only transfer of channeldata if active */
  desc->status[0]=-1;                    /* status of channel */
  desc->npart=-1;                        /* number of parts when dataset is distributed */
  desc->trtype=0;                        /* transfer type */
  desc->channel=-1;                  /* actual channel when transfering in progressive mode */
}

#define MAXVARPARM 11
void nbodybenchparm_advance(lvisit_wavelet_desc_t *desc,int *cnt,int *maxcnt, double *sizefactor) {
  int i,j,rsize;

  i=0;
  while(
	(i<MAXVARPARM) && (maxcnt[i]<0) 
	|| ((desc->type==0)  && ( (i>=3) && (i<=9) )   ) /* no wavelet transform */
	) i++; /* next active parm */
  cnt[i]++;
  MPRINTF(("BENCHMARKING: INCREASED cnt[%d]=%d\n",i,cnt[i]));
  while((i<MAXVARPARM) && (cnt[i]==maxcnt[i])) {
    cnt[i]=0;
    MPRINTF(("BENCHMARKING: RESET cnt[%d]=%d\n",i,cnt[i]));
    if(i<MAXVARPARM) i++;

    while(
	  (i<MAXVARPARM) && (maxcnt[i]<0) 
	  || ((desc->type==0)  && ( (i>=3) && (i<=9) )   ) /* no wavelet transform */
	  ) i++; /* next active parm */

    cnt[i]++;
    MPRINTF(("BENCHMARKING: INCREASED cnt[%d]=%d\n",i,cnt[i]));
  }
  if (i==MAXVARPARM) {
    /* ready */
    for(j=0;j<12;j++) cnt[j]=0;
  }
  MPRINTF(("BENCHMARKING: PARMCNT="));
  for(i=0;i<10;i++) LPRINTF(("%2d ",cnt[i]));
  MPRINTF(("\n"));
  MPRINTF(("BENCHMARKING: PARMMAX="));
  for(i=0;i<10;i++) LPRINTF(("%2d ",maxcnt[i]-1));
  MPRINTF(("\n"));

  /* sizefactor */
  i=2;
  if(maxcnt[i]>1) {
    *sizefactor=maxsize - (maxsize-beginsize)/(maxcnt[i]-1) * cnt[i];

#ifdef BENCH_PGM
    rsize=(int) (*sizefactor*1024);

    if (rsize&1==1) {
      MPRINTF(("WF: change size: %d -> %d\n",rsize,rsize-1));
      *sizefactor=(rsize-1)/1024.0;
    }
    rsize=(int) (*sizefactor*1024);
    
    if (rsize|30!=rsize) {
      MPRINTF(("WF: change size: %d -> %d\n",rsize,rsize|30));
      *sizefactor=(rsize|30)/1024.0;
    }
#endif
#ifdef BENCH_TRACE
    *sizefactor=cnt[i];
#endif
  }

  /* cut */
  i=3;
  if(maxcnt[i]>1) {
    desc->cut=0.0 + 100.0/(maxcnt[i]-1) * cnt[i];
  }


  /* iterforward */
  i=4;
  if(maxcnt[i]>0) {
    desc->iterforward=1+cnt[i];
  }

  /* nquant */
  i=5;
  if(maxcnt[i]>0) {
    if(cnt[i]==0) desc->nquant=8;
    if(cnt[i]==1) desc->nquant=12;
    if(cnt[i]==4) desc->nquant=16;
    
    desc->nquant=8+cnt[i];

/*      if(cnt[i]==2) desc->nquant=12; */
/*      if(cnt[i]==3) desc->nquant=14; */
  }

  /* quantfunction */
  i=7;
  if(maxcnt[i]>0) {
    desc->quantfunction=cnt[i];
  }

  /* cutmethod */
  i=8;
  if(maxcnt[i]>0) {
    desc->cutmethod=cnt[i];
  }

  /* quantcorr */
  i=9;
  if(maxcnt[i]>0) {
    desc->quantcorr=cnt[i];
  }

  /* wtstep */
  i=6;
  if(maxcnt[i]>0) {
    if(cnt[i]==0) strcpy(desc->wtstep,"pwt2");
    if(cnt[i]==1) strcpy(desc->wtstep,"pwt4");
    if(cnt[i]==2) strcpy(desc->wtstep,"pwt8");
    if(cnt[i]==3) strcpy(desc->wtstep,"pwt12");
  }

  /* type */
  i=10;
  if(maxcnt[i]>0) {
    desc->type=cnt[i];
    if(desc->type==2) maxcnt[1]=desc->iterforward;     /* loop_wave */ 
    else              maxcnt[1]=1;                     /* loop_wave */ 
  }


  MPRINTF(("BENCHMARKING: LOOP=%d WAVELOOP=%d SIZEFACTOR=%f VARPARM=%f:%d:%d:%d:%s:%d:%d:%d (cut:type:iter:nquant:wtstep:qfct:cutm:qcor)\n",
	 cnt[0],cnt[1],*sizefactor,desc->cut,desc->type,desc->iterforward,desc->nquant,desc->wtstep,
	 desc->quantfunction,desc->cutmethod,desc->quantcorr));

}


