%!PS-Adobe-3.0
%%Title: dragmbhinit.f, dragblckhl.f, dragblckhl1.f, dragforce.f, dragforce1.f
%%For: Rainer Spurzem
%%Creator: a2ps version 4.13
%%CreationDate: Tue Jan 18 19:45:08 2005
%%BoundingBox: 42 40 564 828
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 8
%%PageOrder: Ascend
%%DocumentMedia: A4kyo 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 842 def
/sw 595 def
/llx 42 def
/urx 564 def
/ury 828 def
/lly 40 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 10.000000 def
/cw 6.000000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   767.000000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(SUBROUTINE) K
( ) p
(DRAGMBHINIT) L
(\(I1,I2\)) p n
(*) c n
(*) N
(*       Force & first derivative.) N
(*       -------------------------) N
(*) N
(      ) p
(INCLUDE) K
( ') p
(common6.h) str
(') p n
(*     Call Drag Force) c n
(      ) p
(DO) K
( 90 I=I1,I2) p n
(      ) S
(CALL) K
( ) p
(DRAGBLCKHL1) l
(\(I\)) p n
(      ) S
(CALL) K
( ) p
(DRAGFORCE1) l
(\(I\)) p n
(      ) S
(DO) K
( 95 K = 1,3) p n
(*) c n
(        F\(K,I\)=FI\(K,I\)+FR\(K,I\)\)) p n
(        FDOT\(K,I\)=D1\(K,I\)+D1R\(K,I\)) N
(*) c n
(        D0\(K,I\) = FI\(K,I\)) p n
(        D0R\(K,I\) = FR\(K,I\)) N
(        FIDOT\(K,I\)=D1\(K,I\)) N
(        FRDOT\(K,I\)=D1R\(K,I\)) N
(   95 ) S
(CONTINUE) K n
(   90 ) p
(CONTINUE) K n
(*) c n
(      ) p
(RETURN) K
(     ) p n
(      ) S
(END) K n
(dragmbhinit.f) (Page 1/1) (Apr 30, 03 23:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(SUBROUTINE) K
( ) p
(DRAGBLCKHL) L
(\(I,FIRR,FD,XI,VI\)) p n
(*) c n
(*) N
(*       Drag force & first derivative.) N
(*       -------------------------) N
(*) N
(*              Types of BODY\(I\),X\(K,I\),XDOT\(K,I\) is Defined in "comon6.h" ) N
(      ) p
(INCLUDE) K
( ') p
(common6.h) str
(') p n
(      ) S
(REAL) K
(*8  FIRR\(3\),FD\(3\),XI\(3\),VI\(3\),AA1\(9\),FBLACKH\(3\),FDBLACKH\(3\)) p n
(*) c n
(*            Auxiliary Calculations for Black Hole Interaction) N
(      ) p
(DO) K
( K=1,3) p n
(      AA1\(K\)=-XI\(K\)) N
(      AA1\(K+3\)=-VI\(K\)) N
(      ) S
(END) K
( ) p
(DO) K n
(      AA1\(7\)=1.0/\(AA1\(1\)*AA1\(1\)+AA1\(2\)*AA1\(2\)+AA1\(3\)*AA1\(3\)+EPS1*EPS1\)) p n
(      AA1\(8\)=CMBLHOLE*AA1\(7\)*) S
(SQRT) K
(\(AA1\(7\)\)) p n
(      AA1\(9\)=3.0*\(AA1\(1\)*AA1\(4\)+AA1\(2\)*AA1\(5\)+AA1\(3\)*AA1\(6\)\)*AA1\(7\)      ) N
(*) c n
(      ) p
(DO) K
( K=1,3) p n
(      FBLACKH\(K\)=AA1\(K\)*AA1\(8\)) N
(      FDBLACKH\(K\)=\(AA1\(K+3\)-AA1\(K\)*AA1\(9\)\)*AA1\(8\)) N
(      ) S
(END) K
( ) p
(DO) K n
(*      EBLCKHL=EBLCKHL-BODY\(I\)*\(FBLACKH\(1\)*XDOT\(1,I\)+) c n
(*     &        FBLACKH\(2\)*XDOT\(2,I\)+ FBLACKH\(3\)*XDOT\(3,I\)\)*STEP\(I\)) N
(*              ) N
(*              Total Force Acting on a Star) N
(*) N
(       ) p
(DO) K
( K=1,3) p n
(         FIRR\(K\)=FIRR\(K\)+FBLACKH\(K\)) N
(         FD\(K\)=FD\(K\)+FDBLACKH\(K\)) N
(       ) S
(END) K
( ) p
(DO) K
( ) p n
(*) c n
(      ) p
(RETURN) K n
(*) c n
(      ) p
(END) K n
(      ) p n
(dragblckhl.f) (Page 1/1) (Jul 24, 02 0:24) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(SUBROUTINE) K
( ) p
(DRAGBLCKHL1) L
(\(I\)) p n
(*) c n
(*) N
(*       Drag force & first derivative.) N
(*       -------------------------) N
(*) N
(*              Types of BODY\(I\),X\(K,I\),XDOT\(K,I\) is Defined in "comon6.h" ) N
(      ) p
(INCLUDE) K
( ') p
(common6.h) str
(') p n
(      ) S
(REAL) K
(*8  FIRR\(3\),FD\(3\),AA1\(9\),FBLACKH\(3\),FDBLACKH\(3\)) p n
(*) c n
(*            Auxiliary Calculations for Black Hole Interaction) N
(      ) p
(DO) K
( K=1,3) p n
(      AA1\(K\)=-X\(K,I\)) N
(      AA1\(K+3\)=-XDOT\(K,I\)) N
(      ) S
(END) K
( ) p
(DO) K n
(      AA1\(7\)=1.0/\(AA1\(1\)*AA1\(1\)+AA1\(2\)*AA1\(2\)+AA1\(3\)*AA1\(3\)+EPS1*EPS1\)) p n
(      AA1\(8\)=CMBLHOLE*AA1\(7\)*) S
(SQRT) K
(\(AA1\(7\)\)) p n
(      AA1\(9\)=3.0*\(AA1\(1\)*AA1\(4\)+AA1\(2\)*AA1\(5\)+AA1\(3\)*AA1\(6\)\)*AA1\(7\)      ) N
(*) c n
(      ) p
(DO) K
( K=1,3) p n
(      FBLACKH\(K\)=AA1\(K\)*AA1\(8\)) N
(      FDBLACKH\(K\)=\(AA1\(K+3\)-AA1\(K\)*AA1\(9\)\)*AA1\(8\)) N
(      ) S
(END) K
( ) p
(DO) K n
(*) c n
(*      EBLCKHL=EBLCKHL+BODY\(I\)*\(FBLACKH\(1\)*XDOT\(1,I\)+) N
(*     &        FBLACKH\(2\)*XDOT\(2,I\)+ FBLACKH\(3\)*XDOT\(3,I\)\)*STEP\(I\)) N
(*              ) N
(*              Total Force Acting on a Star) N
(*) N
(       ) p
(DO) K
( K=1,3) p n
(         FI\(K,I\)=FI\(K,I\)+FBLACKH\(K\)) N
(         D1\(K,I\)=D1\(K,I\)+FDBLACKH\(K\)) N
(       ) S
(END) K
( ) p
(DO) K
( ) p n
(*) c n
(      ) p
(RETURN) K n
(*) c n
(      ) p
(END) K n
(      ) p n
(dragblckhl1.f) (Page 1/1) (Jul 23, 02 23:55) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(SUBROUTINE) K
( ) p
(DRAGFORCE) L
(\(I,FIRR,FD,KDR\)) p n
(*) c n
(*) N
(*       Drag force & first derivative.) N
(*       -------------------------) N
(*) N
(*              Types of BODY\(I\),X\(K,I\),XDOT\(K,I\) is Defined in "comon6.h" ) N
(      ) p
(INCLUDE) K
( ') p
(common6.h) str
(') p n
(      ) S
(REAL) K
(*8  FIRR\(3\),FD\(3\),FDRAG\(3\),FDDRAG\(3\),) p n
(     &        R2DISC,R2DENS,RDISC,DDENS,DDOTDENS,VXRE,VYRE,VZRE,VRE,) N
(     &        CKFDRAG,DVXRE,DVYRE,DVZRE,DVRE,KFDOT,EXCENTR1\(NMAX\),) N
(     &        AORBIT\(NMAX\),BORBIT\(NMAX\),CORBIT\(NMAX\),INCLIN1\(NMAX\),) N
(     &        DISCMOM,STARMOM,ANGLE1,INCLIN2\(NMAX\)) N
(*) c n
(      ) p
(LOGICAL) K
( LPR) p n
(      LPR=NAME\(I\)) S
(\272) sy
(250) p n
(*) c n
(*              Auxiliary Calculations) N
(      R2DISC=X\(1,I\)*X\(1,I\)+X\(2,I\)*X\(2,I\)) p n
(      R2DENS=R2DISC+0.01) N
(      RDISC=) S
(SQRT) K
(\(R2DISC\)) p n
(*) c n
(      DDENS=R2DENS**\(-3.0/8.0\)*) p
(EXP) K
(\(-X\(3,I\)*X\(3,I\)/\(2.0*HZ\)\)) p n
(      DDOTDENS=\(-3.0/4.0\)*\(1.0/R2DENS\)*) N
(     &         \(X\(1,I\)*XDOT\(1,I\)+X\(2,I\)*XDOT\(2,I\)\)-) N
(     &         \(1.0/HZ\)*X\(3,I\)*XDOT\(3,I\)) N
(*) c n
(      VXDISC=-C3*X\(2,I\)/\(\(R2DISC\)**\(3.0/4.0\)\)) p n
(      VYDISC=C3*X\(1,I\)/\(\(R2DISC\)**\(3.0/4.0\)\)) N
(      VXRE=VXDISC-XDOT\(1,I\)) N
(      VYRE=VYDISC-XDOT\(2,I\)) N
(      VZRE=-XDOT\(3,I\)) N
(      VRE=) S
(SQRT) K
(\(VXRE*VXRE + VYRE*VYRE + VZRE*VZRE\)) p n
(      CKFDRAG=Q_DRAG*DDENS*VRE) N
(*) c n
(*              Mean of Drag Force) N
(      FDRAG\(1\)=CKFDRAG*VXRE) p n
(      FDRAG\(2\)=CKFDRAG*VYRE) N
(      FDRAG\(3\)=CKFDRAG*VZRE) N
(*      ) c 8 T ( ) N
(      ) p
(IF) K
(\(KDR) p
(\272) sy
(0\)) p n
(     &EDISS1=EDISS1+BODY\(I\)*\(FDRAG\(1\)*XDOT\(1,I\)+FDRAG\(2\)*XDOT\(2,I\)+) N
(     &       FDRAG\(3\)*XDOT\(3,I\)\)*STEP\(I\) ) N
(      ) N
(*       Turning-Points of Orbits) c n
(      ) p
(IF) K
(\(LPR\) ) p
(THEN) K n
(      V1T1\(I\)=X\(1,I\)*XDOT\(1,I\)+X\(2,I\)*XDOT\(2,I\)+X\(3,I\)*XDOT\(3,I\)) p n
(      V2T2\(I\)=XOLD\(1,I\)*VOLD\(1,I\)+XOLD\(2,I\)*VOLD\(2,I\)+) N
(     &        XOLD\(3,I\)*VOLD\(3,I\)) N
(      V12T\(I\)=V1T1\(I\)*V2T2\(I\)) N
(*) c n
(      ) p
(IF) K
(\(V12T\(I\)) p
(\243) sy
(0.0 ) p
(\331) sy
( V2T2\(I\)) p
(\263) sy
(0.0\) ) p
(THEN) K n
(      RSTARMAX\(I\)=) p
(SQRT) K
(\(R2DISC+X\(3,I\)*X\(3,I\)\)) p n
(      COUNTER1\(I\)=COUNTER1\(I\)+1) N
(      XOLD1\(1,I\)=X\(1,I\)) N
(      XOLD1\(2,I\)=X\(2,I\)) N
(      XOLD1\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*      ) c n
(      ) p
(IF) K
(\(V12T\(I\)) p
(\243) sy
(0.0 ) p
(\331) sy
( V2T2\(I\)<0.0\) ) p
(THEN) K
(   ) p n
(      RSTARMIN\(I\)=) S
(SQRT) K
(\(R2DISC+X\(3,I\)*X\(3,I\)\)) p n
(      COUNTER1\(I\)=COUNTER1\(I\)+1) N
(      XOLD2\(1,I\)=X\(1,I\)) S 24 T () S 32 T () N
(      XOLD2\(2,I\)=X\(2,I\)) N
(      XOLD2\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      ) p
(IF) K
(\(COUNTER1\(I\)) p
(\272) sy
(1\) ) p
(THEN) K n
(      ) p
(IF) K
(\(XOLD\(3,I\)*X\(3,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(IF) K
(\(XOLD\(2,I\)*X\(2,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(IF) K
(\(XOLD\(1,I\)*X\(1,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(GO TO) K
( 515) p n
( 516  XINTER\(1,I\)=X\(1,I\)) N
(      XINTER\(2,I\)=X\(2,I\)) N
(      XINTER\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(dragforce.f) (Page 1/3) (Jul 28, 02 15:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*) c n
( 515  ) p
(CONTINUE) K n
(      XOLD\(1,I\)=X\(1,I\)) p n
(      XOLD\(2,I\)=X\(2,I\)) N
(      XOLD\(3,I\)=X\(3,I\)) N
(      VOLD\(1,I\)=XDOT\(1,I\)) N
(      VOLD\(2,I\)=XDOT\(2,I\)) N
(      VOLD\(3,I\)=XDOT\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*      Excenricity & Inclination of Orbits) N
(      ) p
(IF) K
(\(COUNTER1\(I\)) p
(\272) sy
(2\) ) p
(THEN) K n
(      EXCENTR1\(I\)=\(RSTARMAX\(I\)-RSTARMIN\(I\)\)/\(RSTARMAX\(I\)+RSTARMIN\(I\)\)) p n
(*     PRINT*,'EXCENTRICITY=',EXCENTR1\(I\)) c n
(      AORBIT\(I\)=XINTER\(2,I\)*XOLD1\(3,I\)+XINTER\(3,I\)*XOLD2\(2,I\)+) p n
(     &           XOLD1\(2,I\)*XOLD2\(3,I\)-XOLD1\(3,I\)*XOLD2\(2,I\)-) N
(     &           XOLD1\(2,I\)*XINTER\(3,I\)-XOLD2\(3,I\)*XINTER\(2,I\)) N
(      BORBIT\(I\)=-\(XINTER\(1,I\)*XOLD1\(3,I\)+XINTER\(3,I\)*XOLD2\(1,I\)+) N
(     &           XOLD1\(1,I\)*XOLD2\(3,I\)-XOLD1\(3,I\)*XOLD2\(1,I\)-) N
(     &           XOLD1\(1,I\)*XINTER\(3,I\)-XOLD2\(3,I\)*XINTER\(1,I\)\)) N
(      CORBIT\(I\)=XINTER\(1,I\)*XOLD1\(2,I\)+XINTER\(2,I\)*XOLD2\(1,I\)+) N
(     &          XOLD1\(1,I\)*XOLD2\(2,I\)-XOLD1\(2,I\)*XOLD2\(1,I\)-) N
(     &          XOLD2\(2,I\)*XINTER\(1,I\)-XOLD1\(1,I\)*XINTER\(2,I\)) N
(*      ) c n
(      DISCMOM=\(VXDISC*X\(2,I\)-VYDISC*X\(1,I\)\)) p n
(      STARMOM= \(XDOT\(2,I\)*X\(3,I\)-XDOT\(3,I\)*X\(2,I\)\)**2-) N
(     &         \(XDOT\(1,I\)*X\(3,I\)-XDOT\(3,I\)*X\(1,I\)\)**2+) N
(     &         \(XDOT\(1,I\)*X\(2,I\)-XDOT\(2,I\)*X\(1,I\)\)**2) N
(      ANGLE1= \(XDOT\(1,I\)*X\(2,I\)-XDOT\(2,I\)*X\(1,I\)\)*DISCMOM/) N
(     &        \() S
(SQRT) K
(\(STARMOM\)*) p
(SQRT) K
(\(\(DISCMOM**2\)\)\)) p n
(      ) S
(IF) K
(\(ANGLE1>0.0\) ) p
(THEN) K n
(*     IF\(VXDISC*XDOT\(1,I\).GT.0.0 .AND. VYDISC*XDOT\(2,I\).GT.0.0\) THEN) c n
(      INCLIN2\(I\)=\(360/TWOPI\)*) p
(ACOS) K
(\(ANGLE1\)) p n
(      INCLIN1\(I\)=\(360/TWOPI\)*) S
(ACOS) K
(\() p
(ABS) K
(\(CORBIT\(I\)\)/) p
(SQRT) K
(\(AORBIT\(I\)**2+) p n
(     &            BORBIT\(I\)**2+CORBIT\(I\)**2\)\)) N
(      ) S
(ELSE) K n
(      INCLIN1\(I\)=180-\(360/TWOPI\)*) p
(ACOS) K
(\() p
(ABS) K
(\(CORBIT\(I\)\)/) p n
(     &           ) S
(SQRT) K
(\(AORBIT\(I\)**2+BORBIT\(I\)**2+CORBIT\(I\)**2\)\)) p n
(      INCLIN2\(I\)=\(360/TWOPI\)*) S
(ACOS) K
(\(ANGLE1\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      COUNTER1\(I\)=O) p n
(*     PRINT*,'INCLINATION=',INCLIN1\(I\),INCLIN2\(I\)) c n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*     IF\(LPR\) THEN) N
(*     WRITE\(51,511\) TIME,\(FDRAG\(K\), FDDRAG\(K\),X\(K,I\),XDOT\(K,I\),K=1,3\)) N
(*     WRITE\(52,512\) TIME,INCLIN1\(I\),EXCENTR1\(I\)) N
(*511  ) p
(FORMAT) K
(\(1X,1P,13\(D15.5,1X\)\)) p n
(*512  ) S
(FORMAT) K
(\(1X,1P,3\(D15.5,1X\)\)) p n
(*     END IF) c n
(*      ) N
(*              Auxiliary Calculations) N
(      DTR = TIME - T0R\(I\)) p n
(      DVXRE=-\(C3**2.0\)*X\(1,I\)/\(R2DISC**\(3.0/2.0\)\)-) N
(     &       \(FIRR\(1\)+FR\(1,I\)+FRDOT\(1,I\)*DTR+FDRAG\(1\)\)) N
(      DVYRE=-\(C3**2.0\)*X\(2,I\)/\(R2DISC**\(3.0/2.0\)\)-) N
(     &       \(FIRR\(2\)+FR\(2,I\)+FRDOT\(2,I\)*DTR+FDRAG\(2\)\)) N
(      DVZRE=-\(FIRR\(3\)+FR\(3,I\)+FRDOT\(3,I\)*DTR+FDRAG\(3\)\)) N
(      DVRE=\(VXRE*DVXRE+VYRE*DVYRE+VZRE*DVZRE\)/\(VRE*VRE\)) N
(      KFDOT=Q_DRAG*DDENS*VRE) N
(*   ) c n
(*              Mean of Drag Force Derivative) N
(      FDDRAG\(1\)=KFDOT*\(DDOTDENS*VXRE+DVRE*VXRE+DVXRE\)) p n
(      FDDRAG\(2\)=KFDOT*\(DDOTDENS*VYRE+DVRE*VYRE+DVYRE\)) N
(      FDDRAG\(3\)=KFDOT*\(DDOTDENS*VZRE+DVRE*VZRE+DVZRE\)) N
(*     PRINT*,FDDRAG\(1\),FDDRAG\(2\),FDDRAG\(3\)) c n
(*   ) N
(*     END IF) N
(*    ) N
(      fdx = ) p
(dsqrt) K
(\(fdrag\(1\)**2+fdrag\(2\)**2+fdrag\(3\)**2\)) p n
(      fddx = ) S
(dsqrt) K
(\(fddrag\(1\)**2+fddrag\(2\)**2+fddrag\(3\)**2\)) p n
(      stepdd = fdx/fddx) N
(      ) S
(if) K
(\(stepdd<step\(i\)\)) p
(print) K
(*,') p
( i,dt,dtd=) str
(',i,step\(i\),stepdd) p n
(*              Total Force Acting on a Star) c n
(      ) p
(DO) K
( K=1,3) p n
(dragforce.f) (Page 2/3) (Jul 28, 02 15:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 6
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         FIRR\(K\)=FIRR\(K\)+FDRAG\(K\)) p n
(         FD\(K\)=FD\(K\)+FDDRAG\(K\)) N
(      ) S
(END) K
( ) p
(DO) K
( ) p n
(*) c n
(      ) p
(RETURN) K n
(*) c n
(      ) p
(END) K n
(      ) p n
(dragforce.f) (Page 3/3) (Jul 28, 02 15:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 7
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(SUBROUTINE) K
( ) p
(DRAGFORCE1) L
(\(I\)) p n
(*) c n
(*) N
(*       Drag force & first derivative.) N
(*       -------------------------) N
(*) N
(*              Types of BODY\(I\),X\(K,I\),XDOT\(K,I\) is Defined in "comon6.h" ) N
(      ) p
(INCLUDE) K
( ') p
(common6.h) str
(') p n
(      ) S
(REAL) K
(*8  FIRR\(3\),FD\(3\),FDRAG\(3\),FDDRAG\(3\),) p n
(     &        R2DISC,R2DENS,RDISC,DDENS,DDOTDENS,VXRE,VYRE,VZRE,VRE,) N
(     &        CKFDRAG,DVXRE,DVYRE,DVZRE,DVRE,KFDOT,ECCENTR1\(NMAX\),) N
(     &        AORBIT\(NMAX\),BORBIT\(NMAX\),CORBIT\(NMAX\),INCLIN1\(NMAX\)) N
(*) c n
(      ) p
(LOGICAL) K
( LPR) p n
(      LPR=NAME\(I\)) S
(\272) sy
(250) p n
(*) c n
(*              Auxiliary Calculations) N
(      R2DISC=X\(1,I\)*X\(1,I\)+X\(2,I\)*X\(2,I\)) p n
(      R2DENS=R2DISC+0.01) N
(      RDISC=) S
(SQRT) K
(\(R2DISC\)) p n
(*) c n
(      DDENS=R2DENS**\(-3.0/8.0\)*) p
(EXP) K
(\(-X\(3,I\)*X\(3,I\)/\(2.0*HZ\)\)) p n
(      DDOTDENS=\(-3.0/4.0\)*\(1.0/R2DENS\)*) N
(     &         \(X\(1,I\)*XDOT\(1,I\)+X\(2,I\)*XDOT\(2,I\)\)-) N
(     &         \(1.0/HZ\)*X\(3,I\)*XDOT\(3,I\)) N
(*) c n
(      VXDISC=-C3*X\(2,I\)/\(\(R2DISC\)**\(3.0/4.0\)\)) p n
(      VYDISC=C3*X\(1,I\)/\(\(R2DISC\)**\(3.0/4.0\)\)) N
(      VXRE=VXDISC-XDOT\(1,I\)) N
(      VYRE=VYDISC-XDOT\(2,I\)) N
(      VZRE=-XDOT\(3,I\)) N
(      VRE=) S
(SQRT) K
(\(VXRE*VXRE + VYRE*VYRE + VZRE*VZRE\)) p n
(      CKFDRAG=Q_DRAG*DDENS*VRE) N
(*) c n
(*              Mean of Drag Force) N
(      FDRAG\(1\)=CKFDRAG*VXRE) p n
(      FDRAG\(2\)=CKFDRAG*VYRE) N
(      FDRAG\(3\)=CKFDRAG*VZRE) N
(*      ) c 8 T ( ) N
(      EDISS1=EDISS1+BODY\(I\)*\(FDRAG\(1\)*XDOT\(1,I\)+FDRAG\(2\)*XDOT\(2,I\)+) p n
(     &       FDRAG\(3\)*XDOT\(3,I\)\)*STEP\(I\) ) N
(      ) N
(*       Turning-Points of Orbits) c n
(      ) p
(IF) K
(\(LPR\) ) p
(THEN) K n
(      V1T1\(I\)=X\(1,I\)*XDOT\(1,I\)+X\(2,I\)*XDOT\(2,I\)+X\(3,I\)*XDOT\(3,I\)) p n
(      V2T2\(I\)=XOLD\(1,I\)*VOLD\(1,I\)+XOLD\(2,I\)*VOLD\(2,I\)+) N
(     &        XOLD\(3,I\)*VOLD\(3,I\)) N
(      V12T\(I\)=V1T1\(I\)*V2T2\(I\)) N
(*) c n
(      ) p
(IF) K
(\(V12T\(I\)) p
(\243) sy
(0.0 ) p
(\331) sy
( V2T2\(I\)) p
(\263) sy
(0.0\) ) p
(THEN) K n
(      RSTARMAX\(I\)=) p
(SQRT) K
(\(R2DISC+X\(3,I\)*X\(3,I\)\)) p n
(      COUNTER1\(I\)=COUNTER1\(I\)+1) N
(      XOLD1\(1,I\)=X\(1,I\)) N
(      XOLD1\(2,I\)=X\(2,I\)) N
(      XOLD1\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*      ) c n
(      ) p
(IF) K
(\(V12T\(I\)) p
(\243) sy
(0.0 ) p
(\331) sy
( V2T2\(I\)<0.0\) ) p
(THEN) K
(   ) p n
(      RSTARMIN\(I\)=) S
(SQRT) K
(\(R2DISC+X\(3,I\)*X\(3,I\)\)) p n
(      COUNTER1\(I\)=COUNTER1\(I\)+1) N
(      XOLD2\(1,I\)=X\(1,I\)) S 24 T () S 32 T () N
(      XOLD2\(2,I\)=X\(2,I\)) N
(      XOLD2\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      ) p
(IF) K
(\(COUNTER1\(I\)) p
(\272) sy
(1\) ) p
(THEN) K n
(      ) p
(IF) K
(\(XOLD\(3,I\)*X\(3,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(IF) K
(\(XOLD\(2,I\)*X\(2,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(IF) K
(\(XOLD\(1,I\)*X\(1,I\)) p
(\243) sy
(0.0\) ) p
(GO TO) K
( 516) p n
(      ) S
(GO TO) K
( 515) p n
( 516  XINTER\(1,I\)=X\(1,I\)) N
(      XINTER\(2,I\)=X\(2,I\)) N
(      XINTER\(3,I\)=X\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
( 515  ) p
(CONTINUE) K n
(dragforce1.f) (Page 1/2) (Jul 28, 02 15:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 8
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      XOLD\(1,I\)=X\(1,I\)) p n
(      XOLD\(2,I\)=X\(2,I\)) N
(      XOLD\(3,I\)=X\(3,I\)) N
(      VOLD\(1,I\)=XDOT\(1,I\)) N
(      VOLD\(2,I\)=XDOT\(2,I\)) N
(      VOLD\(3,I\)=XDOT\(3,I\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*      Excenricity & Inclination of Orbits) N
(      ) p
(IF) K
(\(COUNTER1\(I\)) p
(\272) sy
(2\) ) p
(THEN) K n
(      ECCENTR1\(I\)=\(RSTARMAX\(I\)-RSTARMIN\(I\)\)/\(RSTARMAX\(I\)+RSTARMIN\(I\)\)) p n
(*     PRINT*,'ECCENTRICITY=',ECCENTR1\(I\)) c n
(      AORBIT\(I\)=XINTER\(2,I\)*XOLD1\(3,I\)+XINTER\(3,I\)*XOLD2\(2,I\)+) p n
(     &           XOLD1\(2,I\)*XOLD2\(3,I\)-XOLD1\(3,I\)*XOLD2\(2,I\)-) N
(     &           XOLD1\(2,I\)*XINTER\(3,I\)-XOLD2\(3,I\)*XINTER\(2,I\)) N
(      BORBIT\(I\)=-\(XINTER\(1,I\)*XOLD1\(3,I\)+XINTER\(3,I\)*XOLD2\(1,I\)+) N
(     &           XOLD1\(1,I\)*XOLD2\(3,I\)-XOLD1\(3,I\)*XOLD2\(1,I\)-) N
(     &           XOLD1\(1,I\)*XINTER\(3,I\)-XOLD2\(3,I\)*XINTER\(1,I\)\)) N
(      CORBIT\(I\)=XINTER\(1,I\)*XOLD1\(2,I\)+XINTER\(2,I\)*XOLD2\(1,I\)+) N
(     &          XOLD1\(1,I\)*XOLD2\(2,I\)-XOLD1\(2,I\)*XOLD2\(1,I\)-) N
(     &          XOLD2\(2,I\)*XINTER\(1,I\)-XOLD1\(1,I\)*XINTER\(2,I\)) N
(*      ) c n
(      ) p
(IF) K
(\(VXDISC*XDOT\(1,I\)>0.0 ) p
(\331) sy
( VYDISC*X\(2,I\)>0.0\) ) p
(THEN) K n
(      INCLIN1\(I\)=\(360/TWOPI\)*) p
(ACOS) K
(\() p
(ABS) K
(\(CORBIT\(I\)\)/) p
(SQRT) K
(\(AORBIT\(I\)**2+) p n
(     &            BORBIT\(I\)**2+CORBIT\(I\)**2\)\)) N
(      ) S
(ELSE) K n
(      INCLIN1\(I\)=180-\(360/TWOPI\)*) p
(ACOS) K
(\() p
(ABS) K
(\(CORBIT\(I\)\)/) p n
(     &           ) S
(SQRT) K
(\(AORBIT\(I\)**2+BORBIT\(I\)**2+CORBIT\(I\)**2\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      COUNTER1\(I\)=O) p n
(*     PRINT*,'INCLINATION=',INCLIN1\(I\)) c n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*     IF\(LPR\) THEN) N
(*     WRITE\(51,511\) TIME,\(FDRAG\(K\), FDDRAG\(K\),X\(K,I\),XDOT\(K,I\),K=1,3\)) N
(*     WRITE\(52,512\) TIME,INCLIN1\(I\),ECCENTR1\(I\)) N
(*511  ) p
(FORMAT) K
(\(1X,1P,13\(D15.5,1X\)\)) p n
(*512  ) S
(FORMAT) K
(\(1X,1P,3\(D15.5,1X\)\)) p n
(*     END IF) c n
(*      ) N
(*              Auxiliary Calculations) N
(      DVXRE=-\(C3**2.0\)*X\(1,I\)/\(R2DISC**\(3.0/2.0\)\)-) p n
(     &       \(FI\(1,I\)+FR\(1,I\)+FDRAG\(1\)\)) N
(      DVYRE=-\(C3**2.0\)*X\(2,I\)/\(R2DISC**\(3.0/2.0\)\)-) N
(     &       \(FI\(2,I\)+FR\(2,I\)+FDRAG\(2\)\)) N
(      DVZRE=-\(FI\(3,I\)+FR\(3,I\)+FDRAG\(3\)\)) N
(      DVRE=\(VXRE*DVXRE+VYRE*DVYRE+VZRE*DVZRE\)/\(VRE*VRE\)) N
(      KFDOT=Q_DRAG*DDENS*VRE) N
(*   ) c n
(*              Mean of Drag Force Derivative) N
(      FDDRAG\(1\)=KFDOT*\(DDOTDENS*VXRE+DVRE*VXRE+DVXRE\)) p n
(      FDDRAG\(2\)=KFDOT*\(DDOTDENS*VYRE+DVRE*VYRE+DVYRE\)) N
(      FDDRAG\(3\)=KFDOT*\(DDOTDENS*VZRE+DVRE*VZRE+DVZRE\)) N
(*     PRINT*,FDDRAG\(1\),FDDRAG\(2\),FDDRAG\(3\)) c n
(*   ) N
(*     END IF) N
(*    ) N
(*              Total Force Acting on a Star) N
(      ) p
(DO) K
( K=1,3) p n
(         FI\(K,I\)=FI\(K,I\)+FDRAG\(K\)) N
(         D1\(K,I\)=D1\(K,I\)+FDDRAG\(K\)) N
(      ) S
(END) K
( ) p
(DO) K
( ) p n
(*) c n
(      ) p
(RETURN) K n
(*) c n
(      ) p
(END) K n
(      ) p n
(dragforce1.f) (Page 2/2) (Jul 28, 02 15:43) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
