      SUBROUTINE LAGR(C)
*
*
*       Lagrangian radii.
*       -----------------
*
      INCLUDE 'common6.h'
      COMMON/WORK1/  R2(NMAX)
      INTEGER NSHELL(10)
      REAL*4  R2
      REAL*8  C(3), FLAGR(10), RLAGR(10), AVMASS(10)
*
*      DATA FLAGR/-2.0,-1.7,-1.3,-1.0,-0.7,-0.5,-0.3,-0.125,-0.05,-0.02/
*  correspond to: 1% , 2% , 5% , 10%, 20%, 32%, 50%,  75% , 90% , 95%
* 
*      DATA FLAGR/-2.0,-1.7,-1.3,-1.0,-0.6,-0.3,-0.125,-.05,-.02,-.0044/
      DATA FLAGR/0.01,0.02,0.05,0.10,0.25,0.50, 0.75 ,0.90,0.95,0.99/
*  correspond to: 1% , 2% , 5% , 10%, 25%, 50%,  75% , 90%, 95%, 99%
*
*
*  Set square radii of single particles & c.m. bodies.
      NP = 0
      DO 10 I = IFIRST,NTOT
         NP = NP + 1
         R2(NP) = (X(1,I) - C(1))**2 + (X(2,I) - C(2))**2 +
     &                                      (X(3,I) - C(3))**2
         JLIST(NP) = I
 10   CONTINUE

*  Sort square distances with respect to the centre C.
      CALL SORT1(NP,R2,JLIST)

*  Determine the half-mass radius.
*      ZM = 0.0D0
*      ZMH = 0.5*ZMASS
*      I = 0
* 20   I = I + 1
*      IM = JLIST(I)
*      ZM = ZM + BODY(IM)
*      IF (ZM.LT.ZMH) GO TO 20
*
*  Determine the Lagrangian radii for specified mass fractions.
*     RLAGR = Lagrangian radius
*     AVMASS = average mass of a spherical shell with radius R2(I)
*     NSHELL = particle counter within a shell
      ZM = 0.0D0
      ZMH = 0.5*ZMASS
      I = 0

      DO J = 1, 10
         AVMASS(J) = 0.D0
         NSHELL(J) = 0
 20      I = I + 1
         IM = JLIST(I)
         ZM = ZM + BODY(IM)
         AVMASS(J) = AVMASS(J) + BODY(IM)
         NSHELL(J) = NSHELL(J) + 1
         IF (ZM .LT. FLAGR(J)*ZMASS) GOTO 20
         RLAGR(J) = SQRT(R2(I))
         AVMASS(J) = AVMASS(J)/NSHELL(J)
      ENDDO

*  Determine half-mass radius separately.
      ZM = 0.0
      ZMH = 0.5*ZMASS
      I = 0
 30   I = I + 1
      IM = JLIST(I)
      ZM = ZM + BODY(IM)
      IF (ZM.LT.ZMH) GO TO 30
      K = I
*  Replace approximate half-mass radius by actual value.
      RSCALE = SQRT(R2(K))
*
*
*  Check output options.
#ifdef PARALLEL
      if(rank.eq.0)then
#endif
*
         IF (KZ(7).EQ.2 .OR. KZ(7).EQ.4) THEN
             WRITE (6,103) TIME, (RLAGR(K), K=1,10)
 103         FORMAT (/, ' LAGR:    ', F6.2, 10F11.7)
             WRITE (6,105) TIME, (AVMASS(K), K=1,10)
 105         FORMAT (' AVMASS:  ', F6.2, 10F11.7)
*             WRITE (6,107) TIME, (NSHELL(K), K=1,10)
* 107         FORMAT (' NSHELL:  ', F6.2, 10I11)
         END IF
*
*  Alles noch mal in eine Binaerdatei schreiben:
         IF (KZ(7).GE.3) THEN
            WRITE (71) TIME, (RLAGR(K),K=1,10),
     &           (AVMASS(K),K=1,10), (NSHELL(K), K=1,10)
            CALL FLUSH(71)
         END IF
*
#ifdef PARALLEL
      end if
#endif
*
      RETURN
*
      END
