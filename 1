%!PS-Adobe-3.0
%%Title: cu_nbody.cu
%%For: spurzem
%%Creator: a2ps version 4.13
%%CreationDate: Thu Oct  6 15:06:09 2011
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont exch pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 5.651106 def
/cw 3.390664 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   704.692903 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.373464 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) p n
( *  This is a commented version of the original N-Body) N
( *  program, some of the internal variable has a different) N
( *  but better readable name. The structure and principle) N
( *  of this program has no big change.) N
( *) N
( *  Commented By Daniel Zhang <danielzhang0212@gmail.com>) N
( */) N
() N
() N
(#include <stdio.h>) N
(#include <cmath>) N
(#include <cassert>) N
(#include <cutil.h>) N
(#include <omp.h>) N
(#include "cuda_pointer.h") N
() N
() N
(/*) N
( * define some constants, like ) N
( * the number of thread of a block,) N
( * j blocks, and i blocks) N
( */) N
(#define NTHREAD 64 // 64, 96, 128 or 192) N
(#define NJBLOCK 16 // 8800GTS/512 has 16) N
(#define NIBLOCK 16 // 16 or 32 ) N
(#define NIMAX \(NTHREAD * NIBLOCK\) // 1024) N
(#define NBMAX 128 // NNB per block) N
() N
(/*) N
( *  user define vector) N
( */) N
(template <class T>) N
(struct myvector{) N
() S 8 T (int num;) N
() S 8 T (T *val;) N
() S 8 T (myvector\(\){) N
() S 8 T () S 16 T (num = 0;) N
() S 8 T () S 16 T (val = NULL;) N
() S 8 T (}) N
() S 8 T (~myvector\(\){) N
() S 8 T () S 16 T (delete [] val;) N
() S 8 T (}) N
() S 8 T (void clear\(\){) N
() S 8 T () S 16 T (num = 0;) N
() S 8 T (}) N
() S 8 T (void reserve\(size_t count\){) N
() S 8 T () S 16 T (val = new T[count];) N
() S 8 T (}) N
() S 8 T (void free\(\){) N
() S 8 T () S 16 T (delete [] val;) N
() S 8 T (}) N
() S 8 T (void push_back\(const T &t\){) N
() S 8 T () S 16 T (val[num++] = t;) N
() S 8 T (}) N
() S 8 T (size_t size\(\){) N
() S 8 T () S 16 T (return num;) N
() S 8 T (}) N
() S 8 T (T &operator[]\(int i\){) N
() S 8 T () S 16 T (return val[i];) N
() S 8 T (}) N
(};) N
() N
() N
(/* ) N
( * define the time related functions) N
( * in order to record the calculation time.) N
( */) N
(#include <sys/time.h>) N
(static double get_wtime\(\){) N
() S 8 T (struct timeval tv;) N
() S 8 T (gettimeofday\(&tv, NULL\);) N
() S 8 T (return tv.tv_sec + 1.e-6 * tv.tv_usec;) N
(}) N
() N
(static double time_send, time_grav;) N
(static long long numInter) N
() N
() N
(/*) N
( * define the structure of particle J) N
( * contain: position, velocity, mass and pad) N
( */) N
(struct Jparticle{) N
() S 8 T (float3 pos;) S 24 T () S 32 T (// position) N
() S 8 T (float3 vel;) S 24 T () S 32 T (// velocity) N
() S 8 T (float  mass;) S 24 T (// mass) N
() S 8 T (float  pad;) S 24 T () S 32 T (// TODO:don't know!) N
() S 8 T (Jparticle\(\) {}) N
() S 8 T (Jparticle\(double mj, double posj[3], double velj[3]\){) N
() S 8 T () S 16 T (pos.x = posj[0];) N
() S 8 T () S 16 T (pos.y = posj[1];) N
() S 8 T () S 16 T (pos.z = posj[2];) N
() S 8 T () S 16 T (mass  = mj;) N
() S 8 T () S 16 T (vel.x = velj[0];) N
() S 8 T () S 16 T (vel.y = velj[1];) N
() S 8 T () S 16 T (vel.z = velj[2];) N
() S 8 T (}) N
(};) N
() N
() N
(/*) N
( *  define the structure of particle I) N
( *  contain: position, velocity, pad, and h2) N
( */) N
(struct Iparticle{) N
() S 8 T (float3 pos;) S 24 T () S 32 T (// position) N
() S 8 T (float3 vel;) S 24 T () S 32 T (// velocity) N
() S 8 T (float  pad;) S 24 T () S 32 T (// TODO:don't know) N
() S 8 T (float  h2;) S 24 T () S 32 T (// Threshold to dicide a neighbor) N
() S 8 T (Iparticle\(\) {}) N
() S 8 T (Iparticle\(double h2i, double posi[3], double veli[3]\){) N
() S 8 T () S 16 T (pos.x = posi[0];) N
() S 8 T () S 16 T (pos.y = posi[1];) N
() S 8 T () S 16 T (pos.z = posi[2];) N
() S 8 T () S 16 T (h2    = h2i;) N
() S 8 T () S 16 T (vel.x = veli[0];) N
() S 8 T () S 16 T (vel.y = veli[1];) N
() S 8 T () S 16 T (vel.z = veli[2];) N
() S 8 T (}) N
(};) N
() N
(/*) N
( * define the structure of the force) N
(cu_nbody.cu) (Page 1/4) (Oct 06, 11 14:15) title
border
/v 1 store
/x0 x v get 2.373464 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * between two particles, including jerk) p n
( * force, acceleration, potential, and neighborhood) N
( */) N
(struct Force{) N
() S 8 T (float3 acc;) S 24 T () S 32 T (// acceleration) N
() S 8 T (float3 jrk;) S 24 T () S 32 T (// jerk force) N
() S 8 T (float  pot;) S 24 T () S 32 T (// potential) N
() S 8 T (int    nnb;     // number of neighbor particles ONE BYTE) N
() S 8 T (unsigned short  neib[NBMAX]; // 24 words) N
() S 8 T (__device__  Force\(\){) S 32 T (// created inside a kernel) N
() S 8 T () S 16 T (acc.x = acc.y = acc.z = 0.f;) N
() S 8 T () S 16 T (jrk.x = jrk.y = jrk.z = 0.f;) N
() S 8 T () S 16 T (pot = 0.f;) N
() S 8 T () S 16 T (nnb = 0;) N
() S 8 T (}) N
(};) N
() N
() N
(/*) N
( * calculate the FORCE contents) N
( * between two particles.) N
( * using the position and velocity of) N
( * two particles.) N
( */) N
(__device__ void force_kernel\() N
() S 8 T () S 16 T () S 24 T () S 32 T (const int id, ) N
() S 8 T () S 16 T () S 24 T () S 32 T (const Iparticle &ip,) N
() S 8 T () S 16 T () S 24 T () S 32 T (const Jparticle &jp,) N
() S 8 T () S 16 T () S 24 T () S 32 T (Force &force\)) N
({) N
() S 8 T (float dx = jp.pos.x - ip.pos.x;) S 40 T () S 48 T (// position diff of x) N
() S 8 T (float dy = jp.pos.y - ip.pos.y;) S 40 T () S 48 T (// position diff of y) N
() S 8 T (float dz = jp.pos.z - ip.pos.z;) S 40 T () S 48 T (// position diff of z) N
() S 8 T (float dvx = jp.vel.x - ip.vel.x;) S 48 T (// velocity diff of x) N
() S 8 T (float dvy = jp.vel.y - ip.vel.y;) S 48 T (// velocity diff of y) N
() S 8 T (float dvz = jp.vel.z - ip.vel.z;) S 48 T (// velocity diff of z) N
() N
() S 8 T (float dist_square = dx*dx + dy*dy + dz*dz;) N
() N
() S 8 T (float inverse = rsqurtf\(dist_square\);) S 48 T (// used as denominator) N
() N
() S 8 T (if\(dist_square < ip.h2\)) S 32 T (// if the distance is smaller than a value) N
() S 8 T ({) N
() S 8 T () S 16 T (// add this particle into neibour list) N
() S 8 T () S 16 T (force.neib[force.nnb & \(NBMAX-1\)] = \(unsigned\)j;) S 72 T (// do mo) N
(dulus) N
() S 8 T () S 16 T (/* NBMAX-1=\(11111111\) in binary */) N
() S 8 T () S 16 T (force.nnb++;) N
() N
() S 8 T () S 16 T (/* neighbor's force does not count */) N
() S 8 T () S 16 T (inverse = 0.f;) N
() S 8 T (}) N
() S 8 T () N
() S 8 T (float inverse_square = inverse * inverse;) N
() S 8 T (float potential = jp.mass * inverse;) S 48 T () S 56 T (// potential) N
() S 8 T (float acc_para = mass_inverse * inverse;) S 56 T (// accelerate para) N
() S 8 T () N
() S 8 T (rv = -3.f * inverse_square * \(dx*dvx + dy*dvy + dz*dvz\);) N
() N
() S 8 T (/* the final calculation of the FORCE */) N
(#ifdef POTENTIAL) N
() S 8 T (force.pot += potential;) N
(#endif) N
() S 8 T (force.acc.x += acc_para * dx;) N
() S 8 T (force.acc.y += acc_para * dy;) N
() S 8 T (force.acc.z += acc_para * dz;) N
() S 8 T (force.jrk.x += acc_para * \(dvx + rv * dx\);) S 56 T () N
() S 8 T (force.jrk.y += acc_para * \(dvy + rv * dy\);) S 56 T () N
() S 8 T (force.jrk.z += acc_para * \(dvz + rv * dz\);) S 56 T () N
() N
() S 8 T (// FUNCTION DONE) N
(}) N
() N
(/*) N
( *  Main kernel of the n-body forces calculation) N
( */) N
(__global__ void KERNEL\() N
() S 8 T () S 16 T () S 24 T () S 32 T (int nbody,) S 48 T (// number of bodies) N
() S 8 T () S 16 T () S 24 T () S 32 T (Iparticle ips[],) N
() S 8 T () S 16 T () S 24 T () S 32 T (Jparticle jps[],) N
() S 8 T () S 16 T () S 24 T () S 32 T (Force     forces[][NJBLOCK]\)) N
({) N
() S 8 T (int i_bid = blockIdx.x;) N
() S 8 T (int j_bid = blockIdx.y;) N
() S 8 T (int tid = threadIdx.x;) N
() S 8 T (int i_addr = tid + NTHREAD * i_bid;) N
() S 8 T (int j_start=\(nbody/NJBLOCK\) * j_bid;) N
() S 8 T (int j_end=\(nbody/NJBLOCK\) * j_bid +1 ;) N
() N
() N
() S 8 T (Iparticle ip = ips[i_addr];) S 40 T () S 48 T (// fetch the i particle) N
() S 8 T (Force fo;) S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () N
() N
() S 8 T (/*) N
() S 8 T ( * loop every block of j particle,) N
() S 8 T ( * where variable j stand for the first) N
() S 8 T ( * element of the Jblock) N
() S 8 T ( */) N
() S 8 T (for\(int j=j_start;j<j_end;j+=NTHREAD\)) N
() S 8 T ({) N
() S 8 T () S 16 T (__shared__ Jparticle jpshare[NTHREAD];) S 56 T (// use shared memory) N
() S 8 T () S 16 T (__syncthreads\(\);) N
() N
() S 8 T () S 16 T (/* copy data into shared memory */) N
() S 8 T () S 16 T (float4 *src = \(float4 *\) &jps[j];) N
() S 8 T () S 16 T (float4 *dst = \(float4 *\) jpshare;) N
() S 8 T () S 16 T (dst[        tid] = src[        tid];) N
() S 8 T () S 16 T (dst[NTHREAD+tid] = src[NTHREAD+tid];) N
() S 8 T () S 16 T (/*  TODO why copy 2 blocks? ) N
() S 8 T () S 16 T ( */) N
() S 8 T () S 16 T (__syncthreads\(\);) N
() N
() S 8 T () S 16 T (/* ) N
() S 8 T () S 16 T ( *  calculate the I particle's force, ) N
() S 8 T () S 16 T ( *  interactive with every J particle ) N
() S 8 T () S 16 T ( *  in the whole system.) N
() S 8 T () S 16 T ( */) N
() S 8 T () S 16 T (if\(j_end-j<NTHREAD\)) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (for\(int partId=0;partId<jend-j;partId++\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (Jparticle jp = jpshare[partId];) N
() S 8 T () S 16 T () S 24 T () S 32 T (force_kernel\(partId, ip, jp, fo\);) N
() S 8 T () S 16 T () S 24 T (}) N
(cu_nbody.cu) (Page 2/4) (Oct 06, 11 14:15) title
border
grestore
(Printed by spurzem) rhead
() (1/2) (Thursday October 06, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.373464 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T (else) N
() S 8 T () S 16 T ({) N
(#pragma unroll) N
() S 8 T () S 16 T () S 24 T (for\(int partId=0;partId<NTHREAD;partId++\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (Jparticle jp = jpshare[partId];) N
() S 8 T () S 16 T () S 24 T () S 32 T (force_kernel\(partId, ip, jp, fo\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T (/*) N
() S 8 T ( *  the fo's calculation is complete,) N
() S 8 T ( *  save it into buffer. fo stand for ) N
() S 8 T ( *  the i's Iparticle interactive with the) N
() S 8 T ( *  j_bid's block of Jparticle) N
() S 8 T ( */) N
() S 8 T (forces[i_addr][j_bid] = fo;) N
() N
() N
(}) N
() N
(/*) N
( *  The functions below are CPU functions) N
( */) N
() N
(static cudaPointer <Jparticle> jps;) N
(static cudaPointer <Iparticle> ips;) N
(static cudaPointer <Force[NJBLOCK]> forces;) N
() N
(#define MAX_CPU 1) N
(static myvector<int> nblist[MAX_CPU];) N
(static int nbody, nbodymax;) N
() N
(/*) N
( *  the initial and end functions) N
( */) N
(void GPUNB_open\(int nbmax\){) N
() S 8 T (time_send = time_grav = 0.0;) N
() S 8 T (numInter = 0;) N
() N
() S 8 T (jpbuf.allocate\(nbmax + NTHREAD\);) N
() S 8 T (ipbuf.allocate\(NIMAX\);) N
() S 8 T (fobuf.allocate\(NIMAX\);) N
() S 8 T (nbodymax = nbmax;) N
(#pragma omp parallel) N
() S 8 T ({) N
(                int tid = 0;) N
() S 8 T () S 16 T (nblist[tid].reserve\(nbmax\);) N
() S 8 T (}) N
(}) N
(void GPUNB_close\(\){) N
() S 8 T (jpbuf.free\(\);) N
() S 8 T (ipbuf.free\(\);) N
() S 8 T (fobuf.free\(\);) N
() S 8 T (nbodymax = 0;) N
() N
(#ifdef PROFILE) N
() S 8 T (fprintf\(stderr, "***********************\\n"\);) N
() S 8 T (fprintf\(stderr, "time send : %f sec\\n", time_send\);) N
() S 8 T (fprintf\(stderr, "time grav : %f sec\\n", time_grav\);) N
() S 8 T (fprintf\(stderr, "%f Gflops \(gravity part only\)\\n", 60.e-9 * numInter / t) N
(ime_grav\);) N
() S 8 T (fprintf\(stderr, "***********************\\n"\);) N
(#endif) N
(}) N
(void GPUNB_send\() N
() S 8 T () S 16 T (int nj,) N
() S 8 T () S 16 T (double mj[],) N
() S 8 T () S 16 T (double xj[][3],) N
() S 8 T () S 16 T (double vj[][3]\){) N
() S 8 T (time_send -= get_wtime\(\);) N
() S 8 T (nbody = nj;) N
() S 8 T (assert\(nbody <= nbodymax\);) N
() S 8 T (for\(int j=0; j<nj; j++\){) N
() S 8 T () S 16 T (jpbuf[j] = Jparticle\(mj[j], xj[j], vj[j]\);) N
() S 8 T (}) N
() N
() S 8 T (jpbuf.htod\(nj\);) N
() S 8 T (time_send += get_wtime\(\);) N
(}) N
() N
() N
() N
(/*) N
( *  MAIN FUNCTION of this program.) N
( *  Call the kernel.) N
( */) N
(void GPUNB_regf\() N
() S 8 T () S 16 T () S 24 T () S 32 T (int nI,) S 40 T () S 48 T () S 56 T (// number of I particle) N
() S 8 T () S 16 T () S 24 T () S 32 T (double h2[], ) S 48 T (// one para of Iparticle) N
() S 8 T () S 16 T () S 24 T () S 32 T (double xi[][3], // position vector) N
() S 8 T () S 16 T () S 24 T () S 32 T (double vi[][3], // velocity vector) N
() S 8 T () S 16 T () S 24 T () S 32 T (double acc[][3],// acceleration vecotor) N
() S 8 T () S 16 T () S 24 T () S 32 T (double jrk[][3],// force vector) N
() S 8 T () S 16 T () S 24 T () S 32 T (double pot[],) S 48 T (// potential) N
() S 8 T () S 16 T () S 24 T () S 32 T (int lmax, ) S 48 T () S 56 T (// TODO) N
() S 8 T () S 16 T () S 24 T () S 32 T (int nbMax,) S 48 T () S 56 T (// max number of neighbo) N
(r) N
() S 8 T () S 16 T () S 24 T () S 32 T (int *listbase\)  // TODO) N
({) N
() N
() S 8 T (/* get initial time */) N
() S 8 T (time_grav -= get_wtime\(\);) N
() S 8 T (numInter += ni * nbody;) N
() S 8 T (assert\(0 < ni && ni <= NIMAX\)) N
() N
() S 8 T (for\(int i=0;i<nI; i++\)) N
() S 8 T ({) N
() S 8 T () S 16 T (ips[i] = Iparticle\(h2[i],xi[i],vi[i]\);) N
() S 8 T (}) N
() N
() S 8 T (/* load the particles into device memory */) N
() S 8 T (ipbuf.htod\(ni\);) S 24 T () N
() N
() S 8 T (/* start the kernel */) N
() S 8 T (int niblock = 1 + \(nI - 1\) / NTHREAD;) N
() S 8 T (dim3 grid\(niblock , NJBLOCK, 1\);) N
() S 8 T (dim3 threads\(NTHREAD, 1,1,\);) N
() S 8 T (KERNEL <<< grid, threads >>> \(nbody,ips,jps,forces\)) N
() N
() S 8 T (forces.dtoh\(nI\);) S 32 T () N
() S 8 T (// reduction phase) N
() N
(cu_nbody.cu) (Page 3/4) (Oct 06, 11 14:15) title
border
/v 1 store
/x0 x v get 2.373464 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#pragma omp parallel for) p n
() S 8 T (for\(int i=0;i<nI;i++\)) N
() S 8 T ({) N
() S 8 T () S 16 T (// TODO I think "tid" should be "i") N
() S 8 T () S 16 T (//      For it has never changed in ) N
() S 8 T () S 16 T (//      every loop.) N
() S 8 T () S 16 T (int tid=0;) S 32 T () N
() S 8 T () S 16 T (double ax=0,ay=0,az=0;) S 40 T (// acceleration) N
() S 8 T () S 16 T (double jx=0,jy=0,jz=0;) S 40 T (// jerk force) N
(#ifdef POTENTIAL) N
() S 8 T () S 16 T (double poti=0;) N
(#endif) N
() S 8 T () S 16 T (for\(int jblock=0;jblock<NJBLOCK;jblock++\)) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (Force &fo = forces[i][jblock];) N
() S 8 T () S 16 T () S 24 T (ax += fo.acc.x;) N
() S 8 T () S 16 T () S 24 T (ay += fo.acc.y;) N
() S 8 T () S 16 T () S 24 T (az += fo.acc.z;) N
() S 8 T () S 16 T () S 24 T (jx += fo.jrk.x;) N
() S 8 T () S 16 T () S 24 T (jy += fo.jrk.y;) N
() S 8 T () S 16 T () S 24 T (jz += fo.jrk.z;) N
(#ifdef POTENTIAL) N
() S 8 T () S 16 T () S 24 T (poti += fo.pot;) N
(#endif) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (/* save the sum of individual result */) N
() S 8 T () S 16 T (acc[i][0] = ax;) N
() S 8 T () S 16 T (acc[i][1] = ay;) N
() S 8 T () S 16 T (acc[i][2] = az;) N
() S 8 T () S 16 T (jrk[i][0] = jx;) N
() S 8 T () S 16 T (jrk[i][1] = jy;) N
() S 8 T () S 16 T (jrk[i][2] = jz;) N
(#ifdef POTENTIAL) N
() S 8 T () S 16 T (pot[i] = poti;) N
(#endif) N
() N
() S 8 T () S 16 T (/* TODO something about neighbors */) N
() S 8 T () S 16 T (bool overflow = false;) N
() S 8 T () S 16 T (for\(int jblock=0;jblock<NJBLOCK;jblock++\)) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (Force &fo = forces[i][jblock];) N
() S 8 T () S 16 T () S 24 T (int jstart = \(nbody / NJBLOCK\) * jblock;) N
() S 8 T () S 16 T () S 24 T (if\(fo.nnb <= NBMAX\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (for\(int k=0;k<f.nnb;k++\)) N
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (int nb = fo.neib[k];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (while\(nb<jstart\) ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (nb += \(1<<16\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (nblist[tid].push_back\(nb\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (else) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (overflow = true;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T (int * nnbp = listbase + lmax * i;) S 56 T (// number of neighbor pa) N
(rticles) N
() S 8 T () S 16 T (int * nblistp = nnbp +1;) N
() S 8 T () S 16 T (int nnb = nblist[tid].size\(\);) N
() S 8 T () S 16 T (if\(nnb > nbmax\) ) N
() S 8 T () S 16 T () S 24 T (overflow =true;) N
() N
() S 8 T () S 16 T (if\(overflow\)) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (*nnbp = -1;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (else) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (*nnbp = nnb;) N
() S 8 T () S 16 T () S 24 T (for\(int k=0;k<nnb;k++\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (nblistp[k]=nblist[tid][k];) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () N
() N
() S 8 T (}) N
() N
(}) N
() N
(/* TODO combine programming between C and C++ */) N
(extern "C" {) N
() S 8 T (void gpunb_open_\(int *nbmax\){) N
() S 8 T () S 16 T (GPUNB_open\(*nbmax\);) N
() S 8 T (}) N
() S 8 T (void gpunb_close_\(\){) N
() S 8 T () S 16 T (GPUNB_close\(\);) N
() S 8 T (}) N
() S 8 T (void gpunb_send_\() N
() S 8 T () S 16 T () S 24 T (int *nj,) N
() S 8 T () S 16 T () S 24 T (double mj[],) N
() S 8 T () S 16 T () S 24 T (double xj[][3],) N
() S 8 T () S 16 T () S 24 T (double vj[][3]\){) N
() S 8 T () S 16 T (GPUNB_send\(*nj, mj, xj, vj\);) N
() S 8 T (}) N
() S 8 T (void gpunb_regf_\() N
() S 8 T () S 16 T () S 24 T (int *ni,) N
() S 8 T () S 16 T () S 24 T (double h2[],) N
() S 8 T () S 16 T () S 24 T (double xi[][3],) N
() S 8 T () S 16 T () S 24 T (double vi[][3],) N
() S 8 T () S 16 T () S 24 T (double acc[][3],) N
() S 8 T () S 16 T () S 24 T (double jrk[][3],) N
() S 8 T () S 16 T () S 24 T (double pot[],) N
() S 8 T () S 16 T () S 24 T (int *lmax,) N
() S 8 T () S 16 T () S 24 T (int *nbmax,) N
() S 8 T () S 16 T () S 24 T (int *list\){ // list[][lmax]) N
() S 8 T () S 16 T (GPUNB_regf\(*ni, h2, xi, vi, acc, jrk, pot, *lmax, *nbmax, list\);) N
() S 8 T (}) N
(}) N
() N
(cu_nbody.cu) (Page 4/4) (Oct 06, 11 14:15) title
border
grestore
(Printed by spurzem) rhead
() (Thursday October 06, 2011) (2/2) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
