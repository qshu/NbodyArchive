%!PS-Adobe-3.0
%%Title: regint.f
%%For: Rainer Spurzem
%%Creator: a2ps version 4.12
%%CreationDate: Fri Nov  2 18:00:24 2001
%%BoundingBox: 42 40 564 828
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 9
%%PageOrder: Ascend
%%DocumentMedia: A4kyo 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 842 def
/sw 595 def
/llx 42 def
/urx 564 def
/ury 828 def
/lly 40 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 10.000000 def
/cw 6.000000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   767.000000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(SUBROUTINE) K
( ) p
(REGINT) L
(\(I,KLIST\)) p n
(*) c n
(*       Regular integration.) N
(*       --------------------) N
(*) N
(      INCLUDE ') p
(common6.h) str
(') p n
(      ) S
(COMMON) K
(/CHAINC/  XC\(3,NCMAX\),UC\(3,NCMAX\),BODYC\(NCMAX\),ICH,) p n
(     &                LISTC\(LMAX\)) N
(*       Calculate potential with little extra cost.) c n
(      ) p
(COMMON) K
(/POTENT/PHII\(NMAX\),PHIR\(NMAX\),PHIR1\(NMAX\)) p n
(      ) S
(REAL) K
(*8  W0\(4\),W1\(4\),W2\(4\),W3\(4\)) p n
(      ) S
(REAL) K
(*8  XI\(3\),XIDOT\(3\),FIRR\(3\),FREG\(3\),DV\(3\),FD\(3\),FDR\(3\)) p n
(*) c n
(      ) p
(INTEGER) K
( KLIST\(LMAX\)) p n
(*) c n
(      ) p
(DO) K
( 6 K = 1,3) p n
(          XI\(K\) = X\(K,I\)) N
(          XIDOT\(K\) = XDOT\(K,I\)) N
(   6  ) S
(CONTINUE) K n
(*) c n
(*       Copy uncorrected X and set time-step & central distance.) N
(      NNB0 = KLIST\(1\)) p n
(      DTR = TIME - T0R\(I\)) N
(      IRSKIP = 0) N
(      RI2 = \(XI\(1\) - RDENS\(1\)\)**2 + \(XI\(2\) - RDENS\(2\)\)**2 +) N
(     &                              \(XI\(3\) - RDENS\(3\)\)**2) N
(*) c n
(*       Obtain irregular & regular force and determine current neighbours.) N
(      RS2 = RS\(I\)**2) p n
(*       Take volume between inner and outer radius equal to basic sphere.) c n
(    1 RCRIT2 = 1.59*RS2) p n
(*       Set radial velocity factor for the outer shell.) c n
(      VRFAC = -0.1*RS2/DTR) p n
(*       Start count at 2 and subtract 1 at the end to avoid ILIST\(NNB+1\).) c n
(      NNB = 1) p n
(*) c n
(*       Initialize scalars for forces & derivatives.) N
(      ) p
(DO) K
( 5 K = 1,3) p n
(          FIRR\(K\) = 0.0D0) N
(          FREG\(K\) = 0.0D0) N
(          FD\(K\) = 0.0) N
(          FDR\(K\) = 0.0) N
(    5 ) S
(CONTINUE) K n
(      PHII\(I\) = 0.D0) p n
(      PHIR\(I\) = 0.D0) N
(      PHIR1\(I\) = 0.D0) N
(*) c n
(*       Choose appropriate force loop for single particle or c.m. body.) N
(      ) p
(IF) K
( \(I.GT.N\) ) p
(THEN) K n
(*       See whether perturbation allows single particle approximation.) c n
(          ) p
(IF) K
( \(GAMMA\(I-N\)) p
(\263) sy
(GMIN\) ) p
(THEN) K n
(*       Obtain total force on c.m. particle.) c n
(           ) p
(CALL) K
( ) p
(CMFREG) l
(\(I,RS2,RCRIT2,VRFAC,NNB,XI,XIDOT,FIRR,FREG,FD,FDR\)) p n
(           ) S
(GO TO) K
( 20) p n
(          ) S
(END) K
( ) p
(IF) K n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*       Perform fast force loop over single particles.) N
(          ) p
(call) K
( ) p
(cputim) l
(\(tt1\)) p n
(      ) S
(DO) K
( 10 J = IFIRST,N) p n
(*RSP) N
(          ) S
(IF) K
( \(J.EQ.I\) ) p
(GO TO) K
( 10) p n
(*RSP) N
(          A1 = X\(1,J\) - XI\(1\)) N
(          A2 = X\(2,J\) - XI\(2\)) N
(          A3 = X\(3,J\) - XI\(3\)) N
(*       Predicted coordinates avoids spurious force differences.) c n
(          DV\(1\) = XDOT\(1,J\) - XIDOT\(1\)) p n
(          DV\(2\) = XDOT\(2,J\) - XIDOT\(2\)) N
(          DV\(3\) = XDOT\(3,J\) - XIDOT\(3\)) N
(*) c n
(          RIJ2 = A1*A1 + A2*A2 + A3*A3) p n
(          DR2I = 1.0/RIJ2) N
(          DR3I = BODY\(J\)*DR2I*) S
(SQRT) K
(\(DR2I\)) p n
(          DRDV = A1*DV\(1\) + A2*DV\(2\) + A3*DV\(3\)) N
(          DRDP = 3.0*DRDV*DR2I) N
(regint.f) (Page 1/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*) c n
(*       See whether the distance exceeds the outer shell radius.) N
(          ) p
(IF) K
( \(RIJ2.GT.RCRIT2\) ) p
(GO TO) K
( 8) p n
(*) c n
(*       Retain particles with small steps \(large derivative corrections\).) N
(          ) p
(IF) K
( \(RIJ2.GT.RS2.AND.STEP\(J\)>10.0*SMIN\) ) p
(THEN) K n
(*       Accept member if maximum penetration factor exceeds 8 per cent.) c n
(              ) p
(IF) K
( \(DRDV.GT.VRFAC\) ) p
(GO TO) K
( 8) p n
(          ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Increase neighbour counter and obtain current irregular force.) N
(          NNB = NNB + 1) p n
(          ILIST\(NNB\) = J) N
(          FIRR\(1\) = FIRR\(1\) + A1*DR3I) N
(          FIRR\(2\) = FIRR\(2\) + A2*DR3I) N
(          FIRR\(3\) = FIRR\(3\) + A3*DR3I) N
(          FD\(1\) = FD\(1\) + \(DV\(1\) - A1*DRDP\)*DR3I) N
(          FD\(2\) = FD\(2\) + \(DV\(2\) - A2*DRDP\)*DR3I) N
(          FD\(3\) = FD\(3\) + \(DV\(3\) - A3*DRDP\)*DR3I) N
(*       Obtain potential.) c n
(          PHII\(I\) = PHII\(I\) - DR3I*RIJ2) p n
(          ) S
(GO TO) K
( 10) p n
(*) c n
(*       Obtain the regular force.) N
(    8     FREG\(1\) = FREG\(1\) + A1*DR3I) p n
(          FREG\(2\) = FREG\(2\) + A2*DR3I) N
(          FREG\(3\) = FREG\(3\) + A3*DR3I) N
(          FDR\(1\) = FDR\(1\) + \(DV\(1\) - A1*DRDP\)*DR3I) N
(          FDR\(2\) = FDR\(2\) + \(DV\(2\) - A2*DRDP\)*DR3I) N
(          FDR\(3\) = FDR\(3\) + \(DV\(3\) - A3*DRDP\)*DR3I) N
(*       Obtain potential and derivative.) c n
(          PHIR\(I\) = PHIR\(I\) - DR3I*RIJ2) p n
(          PHIR1\(I\) = PHIR1\(I\) + DRDV*DR3I) N
(   10 ) S
(CONTINUE) K n
(          ) p
(call) K
( ) p
(cputim) l
(\(tt2\)) p n
(          ttfrc = ttfrc + \(tt2-tt1\)*60.) N
(*) c n
(*       Add any contributions from regularized c.m. particles.) N
(      ) p
(IF) K
( \(NPAIRS.GT.0\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(CMFREG) l
(\(I,RS2,RCRIT2,VRFAC,NNB,XI,XIDOT,FIRR,FREG,FD,FDR\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Include treatment for regularized clump.) N
(      ) p
(IF) K
( \(NCH.GT.0\) ) p
(THEN) K n
(*       Distinguish between chain c.m. and any other particle.) c n
(          ) p
(IF) K
( \(NAME\(I\)) p
(\272) sy
(0\) ) p
(THEN) K n
(              ) p
(CALL) K
( ) p
(CHFIRR) l
(\(I,1,XI,XIDOT,FIRR,FD\)) p n
(          ) S
(ELSE) K n
(*       Search the chain perturber list for #I.) c n
(              ) p
(DO) K
( 15 L = 2,NNB) p n
(                  J = ILIST\(L\)) N
(                  ) S
(IF) K
( \(J.GT.ICH\) ) p
(GO TO) K
( 20) p n
(                  ) S
(IF) K
( \(J.EQ.ICH\) ) p
(CALL) K
( ) p
(FCHAIN) l
(\(I,1,XI,XIDOT,FIRR,FD\)) p n
(   15         ) S
(CONTINUE) K n
(          ) p
(END) K
( ) p
(IF) K n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*       See whether an external force should be added.) N
(   20 ) p
(CONTINUE) K n
(*) c n
(      ) p
(IF) K
( \(KZ\(14\)>0\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(XTRNLF) l
(\(I,XI,XIDOT,FIRR,FREG,FD,FDR,1\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Check whether cloud forces should be included.) N
(      ) p
(IF) K
( \(KZ\(13\)>0\) ) p
(THEN) K n
(          ) p
(CALL) K
( ) p
(FCLOUD) l
(\(I,FREG,FDR,1\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      NNB = NNB - 1) p n
(*       Check for zero neighbour number or distant particle with large STEP.) c n
(      ) p
(IF) K
( \(NNB.EQ.0.OR.\(RI2.GT.900.0*RSCALE**2.AND.) p n
(     &    STEP\(I\)>200.0*DTMIN\)\) ) S
(THEN) K n
(*       Double the neighbour sphere and try again unless RI > 30*RSCALE.) c n
(          ) p
(IF) K
( \(RI2.GT.900.0*RSCALE**2.OR.KLIST\(1\)) p
(\272) sy
(0\) ) p
(THEN) K n
(              IRSKIP = 1) p n
(regint.f) (Page 2/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*       Assume small mass at centre for distant body or no neighbours.) c n
(              R2 = XI\(1\)**2 + XI\(2\)**2 + XI\(3\)**2) p n
(              FIJ = 0.01*BODYM/\(R2*) S
(SQRT) K
(\(R2\)\)) p n
(              RDOT = 3.0*\(XI\(1\)*XIDOT\(1\) + XI\(2\)*XIDOT\(2\) +) N
(     &                                     XI\(3\)*XIDOT\(3\)\)/R2) N
(              ) S
(DO) K
( 25 K = 1,3) p n
(                  FIRR\(K\) = FIRR\(K\) - FIJ*XI\(K\)) N
(                  FD\(K\) = FD\(K\) - \(XIDOT\(K\) - RDOT*XI\(K\)\)*FIJ) N
(   25         ) S
(CONTINUE) K n
(*       Check maximum membership \(note: NNB may be large\).) c n
(              ) p
(IF) K
( \(NNB.GT.NNBMAX\) ) p
(THEN) K n
(                  RS2 = 0.9*RS2) p n
(                  ) S
(GO TO) K
( 1) p n
(              ) S
(ELSE) K n
(*       Specify zero members and reduce neighbour sphere gradually \(but > 0\).) c n
(                  KLIST\(1\) = 0) p n
(                  RS\(I\) = ) S
(MAX) K
(\(0.75*RS\(I\),0.01*RSCALE\)) p n
(                  ) S
(GO TO) K
( 50) p n
(              ) S
(END) K
( ) p
(IF) K n
(          ) p
(ELSE) K n
(              RS2 = 1.59*RS2) p n
(          ) S
(END) K
( ) p
(IF) K n
(          RS\(I\) = ) p
(SQRT) K
(\(RS2\)) p n
(          NBVOID = NBVOID + 1) N
(          ) S
(IF) K
( \(RS\(I\)>10.0*RSCALE\) IRSKIP = 1) p n
(          ) S
(GO TO) K
( 1) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Restrict neighbour number < NNBMAX to permit one normal addition.) N
(      ) p
(IF) K
( \(NNB.LT.NNBMAX\) ) p
(GO TO) K
( 40) p n
(*) c n
(*       Reduce search radius by cube root of conservative volume factor.) N
(   30 NNB2 = 0.8*NNBMAX) p n
(      A1 = ) S
(FLOAT) K
(\(NNB2\)/) p
(FLOAT) K
(\(NNB\)) p n
(      ) S
(IF) K
( \(RS\(I\)>5.0*RSCALE\) ) p
(THEN) K n
(          A1 = ) p
(MIN) K
(\(5.0*A1,0.9D0\)) p n
(          IRSKIP = 1) N
(      ) S
(END) K
( ) p
(IF) K n
(      RS2 = RS2*A1**0.66667) p n
(      RCRIT2 = 1.59*RS2) N
(      RS\(I\) = ) S
(SQRT) K
(\(RS2\)) p n
(      NNB1 = 0) N
(*) c n
(      ) p
(DO) K
( 35 L = 1,NNB) p n
(          J = ILIST\(L+1\)) N
(          ) S
(IF) K
( \(L + NNB2.GT.NNB + NNB1\) ) p
(GO TO) K
( 32) p n
(*       Sum of neighbours \(NNB1\) & those left \(NNB+1-L\) set to NNB2.) c n
(          A1 = X\(1,J\) - XI\(1\)) p n
(          A2 = X\(2,J\) - XI\(2\)) N
(          A3 = X\(3,J\) - XI\(3\)) N
(          DV\(1\) = XDOT\(1,J\) - XIDOT\(1\)) N
(          DV\(2\) = XDOT\(2,J\) - XIDOT\(2\)) N
(          DV\(3\) = XDOT\(3,J\) - XIDOT\(3\)) N
(*) c n
(          RIJ2 = A1*A1 + A2*A2 + A3*A3) p n
(          DR2I = 1.0/RIJ2) N
(          DR3I = BODY\(J\)*DR2I*) S
(SQRT) K
(\(DR2I\)) p n
(          DRDV = A1*DV\(1\) + A2*DV\(2\) + A3*DV\(3\)) N
(          DRDP = 3.0*DRDV*DR2I) N
(          ) S
(IF) K
( \(RIJ2.GT.RCRIT2\) ) p
(GO TO) K
( 34) p n
(*) c n
(          ) p
(IF) K
( \(RIJ2.GT.RS2.AND.STEP\(J\)>SMIN\) ) p
(THEN) K n
(              ) p
(IF) K
( \(DRDV.GT.VRFAC.AND.J.LE.N\) ) p
(GO TO) K
( 34) p n
(*       Retain any c.m. because of complications in force correction.) c n
(          ) p
(END) K
( ) p
(IF) K n
(*) c n
(   32     NNB1 = NNB1 + 1) p n
(          JLIST\(NNB1+1\) = J) N
(          ) S
(GO TO) K
( 35) p n
(*) c n
(*       Subtract neighbour force included above and add to regular force.) N
(   34     FIRR\(1\) = FIRR\(1\) - A1*DR3I) p n
(          FIRR\(2\) = FIRR\(2\) - A2*DR3I) N
(          FIRR\(3\) = FIRR\(3\) - A3*DR3I) N
(          FD\(1\) = FD\(1\) - \(DV\(1\) - A1*DRDP\)*DR3I) N
(          FD\(2\) = FD\(2\) - \(DV\(2\) - A2*DRDP\)*DR3I) N
(regint.f) (Page 3/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          FD\(3\) = FD\(3\) - \(DV\(3\) - A3*DRDP\)*DR3I) p n
(          FREG\(1\) = FREG\(1\) + A1*DR3I) N
(          FREG\(2\) = FREG\(2\) + A2*DR3I) N
(          FREG\(3\) = FREG\(3\) + A3*DR3I) N
(          FDR\(1\) = FDR\(1\) + \(DV\(1\) - A1*DRDP\)*DR3I) N
(          FDR\(2\) = FDR\(2\) + \(DV\(2\) - A2*DRDP\)*DR3I) N
(          FDR\(3\) = FDR\(3\) + \(DV\(3\) - A3*DRDP\)*DR3I) N
(*       Obtain potential and derivative.) c n
(          PHII\(I\) = PHII\(I\) - DR3I*RIJ2) p n
(          PHIR\(I\) = PHIR\(I\) - DR3I*RIJ2) N
(          PHIR1\(I\) = PHIR1\(I\) + DRDV*DR3I) N
(   35 ) S
(CONTINUE) K n
(*) c n
(      ) p
(DO) K
( 38 L = 2,NNB1+1) p n
(          ILIST\(L\) = JLIST\(L\)) N
(   38 ) S
(CONTINUE) K n
(      NNB = NNB1) p n
(      NBFULL = NBFULL + 1) N
(*       See whether to reduce NNB further.) c n
(      ) p
(IF) K
( \(NNB.GE.NNBMAX\) ) p
(GO TO) K
( 30) p n
(*) c n
(*       Stabilize NNB between ZNBMIN & ZNBMAX by square root of contrast.) N
(*       Include optional stabilization to increase neighbour number.) N
(*       Take input parameter NNBOPT as optimal neighbour number \(R.Sp.\)) N
(*       Note that it substitutes input parameter NNBMAX, which) N
(*       is now a parameter NNBMAX=LMAX-3) N
(*       August 2001: NNBOPT is not working properly, went back to) N
(*                    old algorithm by SJA using NNBMAX) N
(   40 ) p
(CONTINUE) K n
(*) c n
(      FAC = 1.D0) p n
(*     IF \(KZ\(40\).GT.0\) THEN) c n
(*         FAC = 1.0 + 0.1*\(FLOAT\(NNBOPT\) - FLOAT\(NNB\)\)/FLOAT\(NNB\)) N
(*     END IF) N
(*) N
(      A3 = ALPHA*FAC*) p
(SQRT) K
(\() p
(FLOAT) K
(\(NNB\)*RS\(I\)\)/RS2) p n
(*     A3 = FLOAT\(NNB\)*FAC) c n
(      A3 = ) p
(MIN) K
(\(A3,0.9*ZNBMAX\)) p n
(      A4 = ) S
(MAX) K
(\(A3,ZNBMIN\)/) p
(FLOAT) K
(\(NNB\)) p n
(*) c n
(*       Include inertial factor to prevent resonance oscillations in RS.) N
(      ) p
(IF) K
( \(\(A3 - ) p
(FLOAT) K
(\(NNB0\)\)*\(A3 - ) p
(FLOAT) K
(\(NNB\)\)<0.0\) A4 = ) p
(SQRT) K
(\(A4\)) p n
(*) c n
(*       Modify volume ratio by radial velocity factor outside the core.) N
(      ) p
(IF) K
( \(RI2.GT.RC2\) ) p
(THEN) K n
(          RIDOT = \(XI\(1\) - RDENS\(1\)\)*XIDOT\(1\) +) p n
(     &            \(XI\(2\) - RDENS\(2\)\)*XIDOT\(2\) +) N
(     &            \(XI\(3\) - RDENS\(3\)\)*XIDOT\(3\)) N
(          A4 = A4*\(1.0 + RIDOT*DTR/RI2\)) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       See whether neighbour radius of c.m. body should be increased.) N
(      ) p
(IF) K
( \(I.GT.N\) ) p
(THEN) K n
(*       Set perturber range \(soft binaries & H > 0 have short duration\).) c n
(          A2 = 100.0*BODY\(I\)/) p
(ABS) K
(\(H\(I-N\)\)) p n
(*       Stabilize NNB on ZNBMAX if too few perturbers.) c n
(          ) p
(IF) K
( \(A2.GT.RS\(I\)\) ) p
(THEN) K n
(              A3 = ) p
(MAX) K
(\(1.0 - ) p
(FLOAT) K
(\(NNB\)/ZNBMAX,0.0D0\)) p n
(*       Modify volume ratio by approximate square root factor.) c n
(              A4 = 1.0 + 0.5*A3) p n
(          ) S
(END) K
( ) p
(IF) K n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*       Limit change of RS for small steps \(RSFAC = MAX\(25/TCR,1.5*VC/RSMIN\).) N
(      A5 = ) p
(MIN) K
(\(RSFAC*DTR,0.25D0\)) p n
(*       Restrict volume ratio by inertial factor of 25 per cent either way.) c n
(      A4 = A4 - 1.0) p n
(      ) S
(IF) K
( \(A4.GT.A5\) ) p
(THEN) K n
(          A4 = A5) p n
(      ) S
(ELSE) K n
(          A4 = ) p
(MAX) K
(\(A4,-A5\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Modify neighbour sphere radius by volume factor.) N
(      ) p
(IF) K
( \(IRSKIP.EQ.0\) ) p
(THEN) K n
(          ) p
(IF) K
( \(RS\(I\)>50.0*RSCALE\) ) p
(GO TO) K
( 50) p n
(regint.f) (Page 4/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          A3 = ONE3*A4) p n
(          A1 = 1.0 + A3 - A3*A3) N
(*       Second-order cube root expansion \(maximum volume error < 0.3 %\).) c n
(          ) p
(IF) K
( \(RS\(I\)>5.0*RSCALE\) A1 = ) p
(SQRT) K
(\(A1\)) p n
(*       Skip modification for small changes \(avoids oscillations in RS\).) c n
(          ) p
(IF) K
( \() p
(ABS) K
(\(A1 - 1.0D0\)>0.003\) ) p
(THEN) K n
(              RS\(I\) = A1*RS\(I\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*       Calculate the radial velocity with respect to at most 3 neighbours.) N
(      ) p
(IF) K
( \(NNB.LE.3.AND.RI2.LT.100.0*RSCALE**2\) ) p
(THEN) K n
(          A1 = 2.0*RS\(I\)) p n
(*) c n
(          ) p
(DO) K
( 45 L = 1,NNB) p n
(              J = ILIST\(L+1\)) N
(              RIJ = ) S
(SQRT) K
(\(\(XI\(1\) - X\(1,J\)\)**2 + \(XI\(2\) - X\(2,J\)\)**2 +) p n
(     &                                         \(XI\(3\) - X\(3,J\)\)**2\)) N
(              RSDOT = \(\(XI\(1\) - X\(1,J\)\)*\(XIDOT\(1\) - XDOT\(1,J\)\) +) N
(     &                 \(XI\(2\) - X\(2,J\)\)*\(XIDOT\(2\) - XDOT\(2,J\)\) +) N
(     &                 \(XI\(3\) - X\(3,J\)\)*\(XIDOT\(3\) - XDOT\(3,J\)\)\)/RIJ) N
(*       Find smallest neighbour distance assuming constant regular step.) c n
(              A1 = ) p
(MIN) K
(\(A1,RIJ + RSDOT*DTR\)) p n
(   45     ) S
(CONTINUE) K n
(*) c n
(*       Increase neighbour sphere if all members are leaving inner region.) N
(          RS\(I\) = ) p
(MAX) K
(\(A1,1.1*RS\(I\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Check optional procedures for adding neighbours.) N
(      ) p
(IF) K
( \(KZ\(18\)) p
(\272) sy
(0\) ) p
(GO TO) K
( 50) p n
(      ) S
(IF) K
( \(KZ\(18\)) p
(\272) sy
(1.AND.LISTV\(1\)) p
(\272) sy
(0\) ) p
(GO TO) K
( 50) p n
(      ) S
(CALL) K
( ) p
(CHECKL) l
(\(I,NNB,XI,XIDOT,RS2,FIRR,FREG,FD,FDR\)) p n
(*) c n
(*       Find loss or gain of neighbours at the same time.) N
(   50 NBLOSS = 0) p n
(      NBGAIN = 0) N
(*) c n
(*       Check case of zero old or new membership \(skip if both are zero\).) N
(      ) p
(IF) K
( \(NNB0.EQ.0\) ) p
(THEN) K n
(          ) p
(IF) K
( \(NNB.EQ.0\) ) p
(GO TO) K
( 70) p n
(          KLIST\(2\) = 0) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(      JMIN = 0) p n
(      L = 2) N
(      LG = 2) N
(*       Set termination value in ILIST\(NNB+2\) and save last list member.) c n
(      ILIST\(NNB+2\) = NTOT + 1) p n
(      ILIST\(1\) = KLIST\(NNB0+1\)) N
(*) c n
(*       Compare old and new list members in locations L & LG.) N
(   56 ) p
(IF) K
( \(KLIST\(L\)) p
(\272) sy
(ILIST\(LG\)\) ) p
(GO TO) K
( 58) p n
(*) c n
(*       Now check whether inequality means gain or loss.) N
(      ) p
(IF) K
( \(KLIST\(L\)) p
(\263) sy
(ILIST\(LG\)\) ) p
(THEN) K n
(          NBGAIN = NBGAIN + 1) p n
(          JLIST\(NNB0+NBGAIN\) = ILIST\(LG\)) N
(*       Number of neighbour losses can at most be NNB0.) c n
(          L = L - 1) p n
(*       The same location will be searched again after increasing L below.) c n
(      ) p
(ELSE) K n
(          NBLOSS = NBLOSS + 1) p n
(          J = KLIST\(L\)) N
(          JLIST\(NBLOSS\) = J) N
(*       Check SMIN step indicator \(rare case permits fast skip below\).) c n
(          ) p
(IF) K
( \(STEP\(J\)<SMIN\) JMIN = J) p n
(          LG = LG - 1) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       See whether the last location has been checked.) N
(   58 ) p
(IF) K
( \(L.LE.NNB0\) ) p
(THEN) K n
(          L = L + 1) p n
(          LG = LG + 1) N
(*       Last value of second search index is NNB + 2 which holds NTOT + 1.) c n
(          ) p
(GO TO) K
( 56) p n
(regint.f) (Page 5/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (6) 6
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(ELSE) K
( ) p
(IF) K
( \(LG.LE.NNB\) ) p
(THEN) K n
(          LG = LG + 1) p n
(          KLIST\(L\) = NTOT + 1) N
(*       Last location of list holds termination value \(saved in ILIST\(1\)\).) c n
(          ) p
(GO TO) K
( 56) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       See whether any old neighbour with small step should be retained.) N
(      ) p
(IF) K
( \(JMIN.EQ.0\) ) p
(GO TO) K
( 70) p n
(*) c n
(      K = 1) p n
(   60 ) S
(IF) K
( \(NNB.GT.NNBMAX.OR.I.GT.N\) ) p
(GO TO) K
( 70) p n
(      J = JLIST\(K\)) N
(*       A single regularized component will be replaced by the c.m.) c n
(      ) p
(IF) K
( \(STEP\(J\)>SMIN.OR.J.LT.IFIRST.OR.J.GT.N\) ) p
(GO TO) K
( 68) p n
(*       Retain old neighbour inside 2*RS to avoid large correction terms.) c n
(      RIJ2 = \(XI\(1\) - X\(1,J\)\)**2 + \(XI\(2\) - X\(2,J\)\)**2 +) p n
(     &                             \(XI\(3\) - X\(3,J\)\)**2) N
(      ) S
(IF) K
( \(RIJ2.GT.4.0*RS2\) ) p
(GO TO) K
( 68) p n
(*) c n
(      L = NNB + 1) p n
(   62 ) S
(IF) K
( \(ILIST\(L\)<J\) ) p
(GO TO) K
( 64) p n
(      ILIST\(L+1\) = ILIST\(L\)) N
(      L = L - 1) N
(      ) S
(IF) K
( \(L.GT.1\) ) p
(GO TO) K
( 62) p n
(*) c n
(*       Save index of body #J and update NNB & NBLOSS.) N
(   64 ILIST\(L+1\) = J) p n
(      NNB = NNB + 1) N
(      NBLOSS = NBLOSS - 1) N
(*       Restore last old neighbour in case NBLOSS = 0 at end of search.) c n
(      KLIST\(NNB0+1\) = ILIST\(1\)) p n
(      NBSMIN = NBSMIN + 1) N
(*) c n
(*       Perform correction to irregular and regular force components.) N
(      A1 = X\(1,J\) - XI\(1\)) p n
(      A2 = X\(2,J\) - XI\(2\)) N
(      A3 = X\(3,J\) - XI\(3\)) N
(      DV\(1\) = XDOT\(1,J\) - XIDOT\(1\)) N
(      DV\(2\) = XDOT\(2,J\) - XIDOT\(2\)) N
(      DV\(3\) = XDOT\(3,J\) - XIDOT\(3\)) N
(*) c n
(      RIJ2 = A1*A1 + A2*A2 + A3*A3) p n
(      DR2I = 1.0/RIJ2) N
(      DR3I = BODY\(J\)*DR2I*) S
(SQRT) K
(\(DR2I\)) p n
(      DRDV = A1*DV\(1\) + A2*DV\(2\) + A3*DV\(3\)) N
(      DRDP = 3.0*DRDV*DR2I) N
(*) c n
(      FIRR\(1\) = FIRR\(1\) + A1*DR3I) p n
(      FIRR\(2\) = FIRR\(2\) + A2*DR3I) N
(      FIRR\(3\) = FIRR\(3\) + A3*DR3I) N
(      FD\(1\) = FD\(1\) + \(DV\(1\) - A1*DRDP\)*DR3I) N
(      FD\(2\) = FD\(2\) + \(DV\(2\) - A2*DRDP\)*DR3I) N
(      FD\(3\) = FD\(3\) + \(DV\(3\) - A3*DRDP\)*DR3I) N
(      FREG\(1\) = FREG\(1\) - A1*DR3I) N
(      FREG\(2\) = FREG\(2\) - A2*DR3I) N
(      FREG\(3\) = FREG\(3\) - A3*DR3I) N
(      FDR\(1\) = FDR\(1\) - \(DV\(1\) - A1*DRDP\)*DR3I) N
(      FDR\(2\) = FDR\(2\) - \(DV\(2\) - A2*DRDP\)*DR3I) N
(      FDR\(3\) = FDR\(3\) - \(DV\(3\) - A3*DRDP\)*DR3I) N
(*       Obtain potential and derivative.) c n
(      PHII\(I\) = PHII\(I\) - DR3I*RIJ2) p n
(      PHIR\(I\) = PHIR\(I\) - DR3I*RIJ2) N
(      PHIR1\(I\) = PHIR1\(I\) + DRDV*DR3I) N
(*) c n
(*       Remove body #J from JLIST unless it is the last or only member.) N
(      ) p
(IF) K
( \(K.GT.NBLOSS\) ) p
(GO TO) K
( 70) p n
(      ) S
(DO) K
( 66 L = K,NBLOSS) p n
(          JLIST\(L\) = JLIST\(L+1\)) N
(   66 ) S
(CONTINUE) K n
(*       Index of last body to be moved up is L = NBLOSS + 1.) c n
(      K = K - 1) p n
(*       Check the same location again since a new body has appeared.) c n
(   68 K = K + 1) p n
(*       Last member to be considered is in location K = NBLOSS.) c n
(      ) p
(IF) K
( \(K.LE.NBLOSS\) ) p
(GO TO) K
( 60) p n
(regint.f) (Page 6/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 7
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*) c n
(*       Form time-step factors and update regular force time.) N
(   70 DTSQ = DTR**2) p n
(      DT6 = 6.0/\(DTR*DTSQ\)) N
(      DT2 = 2.0/DTSQ) N
(      DTSQ12 = ONE12*DTSQ) N
(      DTR13 = ONE3*DTR) N
(      T0R\(I\) = TIME) N
(*) c n
(*       Suppress the corrector for large time-step ratios \(experimental\).) N
(      ) p
(IF) K
( \(DTR.GT.50.0*STEP\(I\)\) ) p
(THEN) K n
(          DTR13 = 0.0) p n
(          DTSQ12 = 0.0) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Include the corrector and save F, FI, FR & polynomial derivatives.) N
(      ) p
(DO) K
( 75 K = 1,3) p n
(*       Subtract change of neighbour force to form actual first derivative.) c n
(          DFR = FR\(K,I\) - \(FIRR\(K\) - FI\(K,I\)\) - FREG\(K\)) p n
(          FDR0 = FDR\(K\) - \(FIDOT\(K,I\) - FD\(K\)\)) N
(*) c n
(          FRD = FRDOT\(K,I\)) p n
() S 8 T (  ) S
(SUM) K
( = FRD + FDR0) p n
() S 8 T (  AT3 = 2.0*DFR + DTR*) S
(SUM) K n
() p 8 T (  BT2 = -3.0*DFR - DTR*\() S
(SUM) K
( + FRD\)) p n
(*       Use here new variables for consistency in parallel execution \(R.Sp.\)) c n
(          XN\(K,I\) = X0\(K,I\) + \(0.6*AT3 + BT2\)*DTSQ12) p n
(          XNDOT\(K,I\) = X0DOT\(K,I\) + \(0.75*AT3 + BT2\)*DTR13) N
(*) c n
(          FI\(K,I\) = FIRR\(K\)) p n
(          FR\(K,I\) = FREG\(K\)) N
(          FIDOT\(K,I\) = FD\(K\)) N
(          FRDOT\(K,I\) = FDR\(K\)) N
(*) c n
(          D0\(K,I\) = FIRR\(K\)) p n
(          D0R\(K,I\) = FREG\(K\)) N
(          D1R\(K,I\) = FDR\(K\)) N
(          D3R\(K,I\) = AT3*DT6) N
(          D2R\(K,I\) = \(3.0*AT3 + BT2\)*DT2) N
(   75 ) S
(CONTINUE) K n
(*) c n
(      NBFLUX = NBFLUX + NBLOSS + NBGAIN) p n
(*       Correct force polynomials due to neighbour changes \(KZ\(38\) or I > N\).) c n
(      ) p
(IF) K
( \(KZ\(38\)>0.OR.I.GT.N\) ) p
(THEN) K n
(      ) p
(CALL) K
( ) p
(FPCORR) l
(\(I,NBLOSS,NBGAIN,XI,XIDOT,FIRR,FREG,FD,FDR,KLIST\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Copy new neighbour list if different from old list.) N
(      ) p
(IF) K
( \(NBLOSS + NBGAIN.GT.0\) ) p
(THEN) K n
(          KLIST\(1\) = NNB) p n
(          ) S
(DO) K
( 80 L = 2,NNB+1) p n
(              KLIST\(L\) = ILIST\(L\)) N
(   80     ) S
(CONTINUE) K n
(      ) p
(END) K
( ) p
(IF) K n
(*) c n
(*       Check for boundary reflection \(RI2 < 0 denotes new polynomials set\).) N
(*     IF \(KZ\(29\).GT.0.AND.RI2.GT.RS2\) THEN) N
(*         CALL REFLCT\(I,RI2\)) N
(*         IF \(RI2.LT.0.0\) GO TO 120) N
(*     END IF) N
(*) N
(*       Obtain new regular integration step using composite expression.) N
(*       STEPR = \(ETAR*\(F*F2DOT + FDOT**2\)/\(FDOT*F3DOT + F2DOT**2\)\)**0.5.) N
(      ) p
(DO) K
( 100 K = 1,3) p n
(          W1\(K\) = FDR\(K\)) N
(          W2\(K\) = D2R\(K,I\)) N
(          W3\(K\) = D3R\(K,I\)) N
(  100 ) S
(CONTINUE) K n
(*) c n
(      W0\(4\) = FREG\(1\)**2 + FREG\(2\)**2 + FREG\(3\)**2) p n
(      W1\(4\) = W1\(1\)**2 + W1\(2\)**2 + W1\(3\)**2) N
(      W2\(4\) = W2\(1\)**2 + W2\(2\)**2 + W2\(3\)**2) N
(      W3\(4\) = W3\(1\)**2 + W3\(2\)**2 + W3\(3\)**2) N
(*) c n
(*       Form new step by relative criterion \(extra SQRT for large F3DOT\).) N
(      ) p
(IF) K
( \(W3\(4\)<1.0E+20\) ) p
(THEN) K n
(regint.f) (Page 7/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (8) 8
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          W0\(1\) = \() p
(SQRT) K
(\(W0\(4\)*W2\(4\)\) + W1\(4\)\)/) p n
(     &                                       \() S
(SQRT) K
(\(W1\(4\)*W3\(4\)\) + W2\(4\)\)) p n
(      ) S
(ELSE) K n
(          W0\(1\) = \() p
(SQRT) K
(\(W0\(4\)*W2\(4\)\) + W1\(4\)\)/) p n
(     &                                 \() S
(SQRT) K
(\(W1\(4\)\)*) p
(SQRT) K
(\(W3\(4\)\) + W2\(4\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(      W0\(1\) = ETAR*W0\(1\)) p n
(      TTMP = ) S
(SQRT) K
(\(W0\(1\)\)) p n
(*       Winston Sweatman's suggestion) c n
(*     DVV = \(XDOT\(1,I\)-X0DOT\(1,I\)\)**2 + \(XDOT\(2,I\)-X0DOT\(2,I\)\)**2 +) N
(*    &     \(XDOT\(3,I\)-X0DOT\(3,I\)\)**2) N
(*     FFD = FREG\(1\)**2 + FREG\(2\)**2 + FREG\(3\)**2) N
(*     ETARW = ETAR) N
(*     TTMPW = ETARW*DVV*BODY\(I\)/FFD) N
(*) N
(*     PRINT*,' Reg I=',I,' TTMP,TTMPW,RATIO=',) N
(*    &  TTMP,TTMPW,TTMP/TTMPW) N
(*) N
(*     IF\(TTMP.GT.TTMPW\)THEN) N
(*     IGT = IGT + 1) N
(*     ELSE) N
(*     ILE = ILE + 1) N
(*     END IF) N
(*     IF\(MOD\(IGT+ILE,100\).EQ.0\)PRINT*,' irr IGT,ILE=',IGT,ILE) N
(*) N
(*     TTMP = MAX\(TTMPW,TTMP\)) N
(*     TTR = TSTEP\(FREG,FDR,D2R\(1,I\),D3R\(1,I\),ETAR\)) N
(*) N
(*       Adopt FAC*MIN\(FREG,FIRR\) \(or tidal force\) for convergence test.) N
(      FAC = ) p
(MIN) K
(\(ETAR,0.04D0\)) p n
(      ) S
(IF) K
( \(TIDAL\(1\)) p
(\272) sy
(0.0D0\) ) p
(THEN) K n
(          FI2 = FIRR\(1\)**2 + FIRR\(2\)**2 + FIRR\(3\)**2) p n
(          W0\(4\) = FAC**2*) S
(MIN) K
(\() p
(DBLE) K
(\(W0\(4\)\),FI2\)) p n
(      ) S
(ELSE) K n
(          W0\(1\) = \(TIDAL\(1\)*XI\(1\)\)**2) p n
(          W0\(4\) = FAC**2*) S
(MAX) K
(\(W0\(4\),W0\(1\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Obtain regular force change using twice the predicted step.) N
(      DTC = 2.0*TTMP) p n
(      S2 = 0.5*DTC) N
(      S3 = ONE3*DTC) N
(      W0\(1\) = 0.0) N
(      ) S
(DO) K
( 105 K = 1,3) p n
(          W0\(2\) = \(\(W3\(K\)*S3 + W2\(K\)\)*S2 + W1\(K\)\)*DTC) N
(          W0\(1\) = W0\(1\) + W0\(2\)**2) N
(  105 ) S
(CONTINUE) K n
(*) c n
(*       See whether regular step can be increased by factor 2.) N
(      ) p
(IF) K
( \(W0\(1\)<W0\(4\)\) ) p
(THEN) K n
(          TTMP = DTC) p n
(          NRCONV = NRCONV + 1) N
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Impose a smooth step reduction inside compact core.) N
(      ) p
(IF) K
( \(NC.LT.50.AND.RI2.LT.RC2\) ) p
(THEN) K n
(          TTMP = TTMP*) p
(MIN) K
(\(1.0D0,0.5D0*\(1.0D0 + RI2*RC2IN\)\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Select discrete value \(increased by 2, decreased by 2 or unchanged\).) N
() p 8 T () S 16 T () S
(IF) K
( \(TTMP ) p
(.GT.) K
( 2.0*STEPR\(I\)\) ) p
(THEN) K n
() p 8 T () S 16 T () S 24 T () S
(IF) K
( \() p
(DMOD) K
(\(TIME,2.0*STEPR\(I\)\) ) p
(.EQ.) K
( 0.0D0\) ) p
(THEN) K n
(              TTMP = ) p
(MIN) K
(\(2.0*STEPR\(I\),1.D0\)) p n
(          ) S
(ELSE) K n
(              TTMP = STEPR\(I\)) p n
(          ) S
(END) K
( ) p
(IF) K n
(      ) p
(ELSE) K
( ) p
(IF) K
( \(TTMP ) p
(.LT.) K
( STEPR\(I\)\) ) p
(THEN) K n
(          TTMP = 0.5*STEPR\(I\)) p n
(      ) S
(ELSE) K n
(          TTMP = STEPR\(I\)) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(*       Set new regular step and reduce irregular step if STEPR < STEP.) N
(*     PRINT*,' New Step = ',TTMP,' Old ',STEPR\(I\),' Quot ',TTMP/STEPR\(I\)) N
(      STEPR\(I\) = TTMP) p n
(*     STEPR\(I\) = MIN\(1.4*STEPR\(I\),DTR1\)) c n
(regint.f) (Page 8/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (9) 9
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 4.200000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*) c n
(  110 ) p
(IF) K
( \(TTMP.LT.STEP\(I\)\) ) p
(THEN) K n
(          STEP\(I\) = 0.5D0*STEP\(I\)) p n
(          TIMENW\(I\) = T0\(I\) + STEP\(I\)) N
(          NICONV = NICONV + 1) N
(          ) S
(GO TO) K
( 110) p n
(      ) S
(END) K
( ) p
(IF) K n
(*) c n
(  120 ) p
(RETURN) K n
(*) c n
(      ) p
(END) K n
(regint.f) (Page 9/9) (Sep 30, 01 20:48) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
