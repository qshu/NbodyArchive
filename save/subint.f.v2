      SUBROUTINE SUBINT(IQ,I10)
*
*
*       Decision-making for subsystems.
*       -------------------------------
*
      INCLUDE 'common6.h'
      COMMON/CLUMP/   BODYS(NCMAX,5),T0S(5),TS(5),STEPS(5),RMAXS(5),
     &                NAMES(NCMAX,5),ISYS(5)
      REAL*8  TSLIST(10*KMAX)
      SAVE  IRUN,LI
      DATA  IRUN /0/
      COMMON/KSSTAT/ISTEPP,ISTEPU,IBINP,IBINU
*
      ISTEPP=0
      ISTEPU=0
      IBINP=0
      IBINU=0
      ICALL = ICALL + 1
      FAC = 1.0/LOG(1.9999999)
      JMM = INT(1 - LOG(DTBMIN)*FAC)
      DTB = TBLOCK - TPREV
      JMN = INT(1 - LOG(DTB)*FAC)
      KBLOCK = 2**(JMM-JMN)
      KBSUM = KBSUM + KBLOCK
      IF(MOD(ICALL,100).EQ.0)PRINT*,' SUBINT: Av KBLOCK=',KBSUM/ICALL
*
*       Determine correct index after restart (NNTB = 0 initially).
      IF (IRUN.EQ.0) THEN
          IRUN = 1
          TI = 1.0D+10
*       Find smallest sum by looping backwards (avoids multiple entries).
          DO 4 K = NNTB,1,-1
              J = KBLIST(K)
              TJ = T0(J) + STEP(J)
              IF (TJ.LT.TI) THEN
                  TI = TJ
                  LI = K
              ELSE
*       Adopt the previous index (increased by 1 below).
                  LI = LI - 1
                  GO TO 1
              END IF
    4     CONTINUE
      END IF
*
*       See whether to advance any KS solutions at start of block-step.
    1 IF (NPAIRS.GT.0) THEN
*       Obtain list of all KS pairs due in interval DTB.
          call cputim(ttxx1)
*
          NNTB = 0
*
          DO 2 IPAIRS = 1,NPAIRS
*
              I1 = 2*IPAIRS - 1
              IF (T0(I1) + STEP(I1).LE.TBLOCK) THEN
                  NNTB = NNTB + 1
                  KBLIST(NNTB) = I1
              END IF
              IF(LIST(1,I1).GT.0)THEN
                 IBINP = IBINP + 1
              ELSE
                 IBINU = IBINU + 1
              END IF
*
 2        CONTINUE
*  
        WRITE(55,*)ICALL,' New KBLIST ',
     *   ' members =',NNTB,' TBLOCK=',TBLOCK
        WRITE(55,*)' U/P=',IBINU,IBINP
          call cputim(ttxx2)
          ttkbs = ttkbs + (ttxx2-ttxx1)*60.
*
          TSAVE = TBLOCK
          TPSAVE = TPREV
          DTB = (TBLOCK - TPREV)/KBLOCK
*
          DO 3 IX = 1,KBLOCK
*
          TBLOCK = TPREV + DTB
          TPREV = TBLOCK
*
          DO 5 LI = 1,NNTB
          I1 = KBLIST(LI)
          TIME = T0(I1) + STEP(I1)
*
*       See whether the smallest KS time falls due before next block-step.
   10         CONTINUE
              call cputim(ttxa)
              IF(TIME.LE.TBLOCK)CALL KSINT(I1)
              call cputim(ttxb)
              ttksx = ttksx + (ttxb-ttxa)*60.
*
*       Check for multiple calls of #I1 (saves using CALL INSERT).
              call cputim(ttix1)
              IF (IPHASE.EQ.0) THEN
                  TI = TIME + STEP(I1)
                  IF (TI.LE.TBLOCK) THEN
                      TIME = TI
                      ITX = ITX + 1
              call cputim(ttix2)
              ttksix = ttksix + (ttix2-ttix1)*60.
                      GO TO 10
                  END IF
              END IF
              call cputim(ttix2)
              ttksix = ttksix + (ttix2-ttix1)*60.
*
*       Set KS indicator on termination, multiple regularization or merger.
              IF (IPHASE.NE.0) THEN
                  IF (IQ.EQ.0.OR.IPHASE.LT.0) THEN
                      IQ = IPHASE
*       Save KS index until exit (collision treated in situ).
                      IF (IQ.GT.0) THEN
                          I10 = I1
                      END IF
                  END IF
*
*       Reset non-zero decision indicator (continue on positive value).
                      IPHASE = 0
              END IF
*
*       Continue cycle until end of block-step.
 5      CONTINUE
 3      CONTINUE
*
        TBLOCK = TSAVE
        TPREV = TPSAVE
*
        IAVLI = IAVLI + 1
        AVLI = (AVLI*FLOAT(IAVLI-1) + FLOAT(NNTB))/FLOAT(IAVLI)
        WRITE(55,*)' Did last KSINT TIME=',TIME,
     *  ' LI=',LI, ' at TBLOCK=',TBLOCK,' AVLI=',AVLI
        WRITE(55,*)' ttkbs,ksx,ksix=',ttkbs,ttksx,ttksix,
     *  ' ITX=',ITX
        WRITE(55,*)'--------------------------------------------'
*
*       Copy original block time at end of KS treatment.
          TIME = TBLOCK
          NBPREV = NPAIRS
*       Reduce pointer by 1 for next block-step (otherwise not done).
          LI = LI - 1
      END IF
*
*       Check time for advancing any triple, quad or chain regularization.
      IF (NSUB.GT.0) THEN
   30     TSUB = 1.0D+10
          DO 40 L = 1,NSUB
              IF (TS(L).LT.TSUB) THEN
                  ISUB = L
                  TSUB = TS(L)
              END IF
   40     CONTINUE
*
          IF (TSUB.LE.TBLOCK) THEN
              TIME = TSUB
*       Decide between triple, quad or chain.
              IF (ISYS(ISUB).EQ.1) THEN
*       Update unperturbed size of subsystem and copy c.m. step.
                  CALL EXTEND(ISUB)
                  CALL TRIPLE(ISUB)
              ELSE IF (ISYS(ISUB).EQ.2) THEN
                  CALL EXTEND(ISUB)
                  CALL QUAD(ISUB)
              ELSE
                  IF (STEPS(ISUB).LT.0.0D0) THEN
                      STEPS(ISUB) = 1.0D-10
                      GO TO 50
                  END IF
                  CALL CHAIN(ISUB)
                  IF (ISUB.GT.0.AND.STEPS(ISUB).LT.0.0D0) THEN
                      STEPS(ISUB) = 1.0D-10
                      GO TO 50
                  END IF
              END IF
*
*       Check for termination (set TPREV < TIME and set IQ < 0).
              IF (ISUB.LT.0.OR.IPHASE.LT.0) THEN
                  TPREV = TIME - STEP(NTOT)
                  IQ = -1
              END IF
              GO TO 30
          END IF
   50     TIME = TBLOCK
      END IF
*
      RETURN
*
      END

