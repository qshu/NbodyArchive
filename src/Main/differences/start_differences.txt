8a9
>       DIMENSION XRELPL(3),VRELPL(3),EI(3)
11a13
>       INTEGER nno,nma
18a21,29
> *     --16/05/15 21:28-qishu-debug----------------------------*
> ***** Note:--------------------------------------------------**
> *     warning when nmass >= N
>           if (nmass .ge. N) then
>               print *,'ERROR: NUMBER OF MASSLESS PARTICLES=',nmass,
>      & 'IS LARGER THAN N=',N
>               stop
>           end if
> *     --16/05/15 21:30-qishu-end------------------------------*
21c32
<       if(rank.eq.0)CALL FILE_INIT
---
>       CALL FILE_INIT(0)
36,42c47,48
<       BODYM = ZMASS/FLOAT(N)
< *     Notice from now ZMBAR is mass scale factor instead of average mass of input data
<       IF (KZ(22).NE.10) THEN
<          ZMBAR = ZMBAR/BODYM
<       ELSE
<          ZMBAR = ZMBAR*FLOAT(N)
<       END IF
---
>       BODYM = ZMASS/FLOAT(N-nmass)
>       ZMBAR = ZMBAR/BODYM
78a85,86
>       nno = 0
>       nma = 0
87a96,109
> *     --16/05/15 21:33-qishu-debug----------------------------*
> ***** Note:--------------------------------------------------**
> *       Input data should mark planets with mass <= smallMass  
>           if(body(i).lt.0.0d0) then
>               print *, "particle", i, "mass",body(i)
>               stop "ERROR: negtive particle mass detected!!!"
>           end if
>           if (body(i).le.smallMass)then
>               nomass(i) = 1 
>               nno=nno+1
>           else
>               nomass(i) = 0 
>               nma=nma+1
>           end if
88a111,112
> *          BODY1 : the most massive particles
> *     --16/05/15 21:38-qishu-end------------------------------*
93,100c117,118
< *
< *     DO 27 I = 1,N
< *       write (991,28) BODY(I)*ZMBAR, (X(K,I)*RBAR,K=1,3),
< *    &                (XDOT(K,I)*VSTAR,K=1,3), NAME(I)
< *  27 CONTINUE
< *
< *  28 FORMAT (F10.3,1P,6E18.7,I16)
< *     CALL FLUSH(991)
---
>         print *, "Number of initial massless paricles:", nno
>         print *, "Number of initial massive  paricles:", nma
125a144,149
>           SMMIN = 1.D30
>           SMMAX = 0.D0
>           XMMIN = 1.D30
>           XMMAX = 0.D0
>           TMMIN = 1.D30
>           TMMAX = 0.D0
137a162,169
>               IF(RIJ2.LT.SMMIN) SMMIN=RIJ2
>               IF(RIJ2.GT.SMMAX) SMMAX=RIJ2
>               XMBIN = BODY(ICOMP) + BODY(JCOMP)
>               PERIOD = RIJ2**0.75/DSQRT(XMBIN)
>               IF(XMBIN.LT.XMMIN) XMMIN=XMBIN
>               IF(XMBIN.GT.XMMAX) XMMAX=XMBIN
>               IF(PERIOD.LT.TMMIN) TMMIN=PERIOD
>               IF(PERIOD.GT.TMMAX) TMMAX=PERIOD
144a177,184
> *     Diagnostic
>       if(rank.eq.0) write(6,61) SQRT(SMMIN)*RAU, SQRT(SMMAX)*RAU,
>      &      XMMIN*ZMBAR, XMMAX*ZMBAR, TMMIN*DAYS, TMMAX*DAYS
>  61   format(/,' Binary parameters: R12(min)[AU]',F15.6,
>      &     ' R12(max)[AU]',F15.6,' MCM(min)[M*]',F15.6,
>      &     ' MCM(max)[M*]',F15.6,' P[min][days]',1P,E15.6,
>      &     ' P[max][days]',E15.6,0P)
> 
192,194c232
< *     Finalize primordial binaries.
<       IF (KZ(8).GT.0.AND.NBIN0.GT.0) THEN
< *
---
> *     Generate perturber list for KS
201,264c239,254
<           RMMIN = 1.D30
<           RMMAX = 0.D0
<           SMMIN = 1.D30
<           SMMAX = 0.D0
<           ECCMIN = 1.D30
<           ECCMAX = 0.D0
<           XMMIN = 1.D30
<           XMMAX = 0.D0
<           TMMIN = 1.D30
<           TMMAX = 0.D0
<           SOLMIN = 1.D30
<           SOLMAX = 0.D0
<           GMMIN = 1.D30
<           GMMAX = 0.D0
<           SCMMIN = 1.D30
<           SCMMAX = 0.D0
< *
<           DO 57 IPAIR = 1,NPAIRS
<               ICOMP = 2*IPAIR - 1
<               JCOMP = 2*IPAIR
<               ICM = N + IPAIR
< *
<       SEMI = -0.5*BODY(ICM)/H(IPAIR)
<       ECC2 = (1.0-R(IPAIR)/SEMI)**2 + TDOT2(IPAIR)**2/(BODY(ICM)*SEMI)
<       PD = TWOPI*SEMI*SQRT(DABS(SEMI)/BODY(ICM))*TSTAR
<       RIJ2 = R(IPAIR)**2
<       XMBIN = BODY(ICM)
<       XSEP = R(IPAIR)/(RADIUS(ICOMP)+RADIUS(JCOMP))
< *
<               IF(RIJ2.LT.RMMIN) RMMIN=RIJ2
<               IF(RIJ2.GT.RMMAX) RMMAX=RIJ2
<               IF(XSEP.LT.SOLMIN) SOLMIN=XSEP
<               IF(XSEP.GT.SOLMAX) SOLMAX=XSEP
<               IF(SEMI.LT.SMMIN) SMMIN=SEMI
<               IF(SEMI.GT.SMMAX) SMMAX=SEMI
<               IF(XMBIN.LT.XMMIN) XMMIN=XMBIN
<               IF(XMBIN.GT.XMMAX) XMMAX=XMBIN
<               IF(PD.LT.TMMIN) TMMIN=PD
<               IF(PD.GT.TMMAX) TMMAX=PD
<               IF(ECC2.LT.ECCMIN) ECCMIN=ECC2
<               IF(ECC2.GT.ECCMAX) ECCMAX=ECC2
<               IF(GAMMA(IPAIR).LT.GMMIN) GMMIN=GAMMA(IPAIR)
<               IF(GAMMA(IPAIR).GT.GMMAX) GMMAX=GAMMA(IPAIR)
<               IF(STEP(ICM).LT.SCMMIN) SCMMIN=STEP(ICM)
<               IF(STEP(ICM).GT.SCMMAX) SCMMAX=STEP(ICM)
< *
<  57       CONTINUE
< *     Diagnostic
<       if(rank.eq.0) write(6,58) NPAIRS, 
<      &      SQRT(RMMIN)*RAU, SQRT(RMMAX)*RAU,
<      &      SOLMIN, SOLMAX, XMMIN*ZMBAR, XMMAX*ZMBAR, 
<      &      TMMIN*DAYS, TMMAX*DAYS, SMMIN*RAU, SMMAX*RAU,
<      &      DSQRT(ECCMIN), DSQRT(ECCMAX), GMMIN, GMMAX, SCMMIN, SCMMAX
<  58   format(/,' Primordial Binary parameters: NPAIRS ',1P,I7,/,
<      &     ' sep(min)[AU]',E15.6,' sep(max)[AU]',E15.6,
<      &     ' sep(min)[*]',E15.6,' sep(max)[*]',E15.6,/,
<      &     ' MCM(min)[M*]',E15.6,' MCM(max)[M*]',E15.6,
<      &     ' P[min][days]',E15.6,' P[max][days]',E15.6,/,
<      &     ' a[min][AU]',E15.6,' a[max][AU]',E15.6,
<      &     ' ecc[min]',E15.6,' ecc[max]',E15.6,/,
<      &     ' gamma[min]',E15.6,' gamma[max]',E15.6,
<      &     ' stepcm[min]',E15.6,' stepcm[max]',E15.6,0P)
< *
<       END IF
---
> *     --11/08/14 10:12-lwang-debug--------------------------------------*
> ***** Note:------------------------------------------------------------**
> c$$$      DO II = IFIRST,NTOT
> c$$$         write(113,*) 'II',II,'N',NAME(II),'X',X(1:3,II),
> c$$$     &        'XD',XDOT(1:3,II),'F',F(1:3,II),'FD',FDOT(1:3,II),
> c$$$     &        'D2',D2(1:3,II),'STEP',STEP(II),'NNB',LIST(1,II),
> c$$$     &        'LIST',LIST(2:5,II)
> c$$$      END DO
> c$$$      call flush(113)
> c$$$      DO II = 1, NPAIRS
> c$$$         write(114,*) 'II',II,'H',H(II),'R',R(II),'STEP',STEP(2*II-1),
> c$$$     &        'NP',LIST(1,2*II-1),'LIST',LIST(2:5,2*II-1)
> c$$$      END DO
> c$$$      call flush(114)
> c$$$      call abort()
> *     --11/08/14 10:12-lwang-end----------------------------------------*
299,300c289,421
<  80   CONTINUE
< *
---
> *       Adjust NNBMAX (R.Sp.)
>  80   NNBMAX = MIN(N/2,LMAX - 3)
>       ZNBMIN = MAX(0.01*FLOAT(NNBMAX),1.0)
>       ZNBMAX = 0.9*FLOAT(NNBMAX)
> *
> *
> c* @qs
> c*       Regularize any close planet.
> c      IF (nmass.GT.0) THEN
> c          SMMIN = 1.D30
> c          SMMAX = 0.D0
> c          ECCMIN = 1.D30
> c          ECCMAX = 0.D0
> c          IPAIR = 0
> c          DO 51 I = N - nmass + 1,N
> cc use smallMass*1.1, because body(i) = 0.999999999999 * smallMass           
> c              if(body(i).gt.smallMass*1.1) go to 51
> c*             if(nomass(i).eq.0)go to 51
> cc NNB: number of neighbours
> c              NNB = LIST(1,I)
> cc              print *,I,'NNB:',NNB,LIST(1:NNB+1,I)
> c*       Select only planets having close neighbour
> c              IF (NNB.GT.0) THEN
> c                  IPAIR = IPAIR + 1
> c                  JCOMP = I
> c                  NNB1 = NNB + 1
> c                  RXMIN2 = 1.D30
> c*       Search for host star among neighbours
> c                  DO 56 L = 2,NNB1
> c                      J = LIST(L,I)
> c*     --16/05/07 22:23-qishu-debug----------------------------*
> c***** Note:--------------------------------------------------**
> c              if (nomass(J).eq.1) then 
> c*                  print *, "WARNING!! p in neigh" 
> c                  
> c                  go to 56
> c              end if
> c*                      if (nomass(J).eq.1)go to 56 
> c*     --16/05/07 22:23-qishu-end------------------------------*
> c*       Distance determination
> c                      RIJ2 = 0.0
> c                      DO 57 K = 1,3
> c                          RIJ2 = RIJ2 + (X(K,I) - X(K,J))**2
> c   57                 CONTINUE
> c*       Include standard distance criterion.
> c                      IF (RIJ2.LT.RXMIN2) THEN
> c                          ICOMP = J
> c                          RXMIN2 = RIJ2
> c                      END IF
> c*
> c   56             CONTINUE
> c              RIJ2 = 0.0D0
> c              VIJ2 = 0.0D0
> c              RVI = 0.0D0
> c*       Try regularization for all binaries.
> c              DO 58 K = 1,3
> c              XRELPL(K) = X(K,ICOMP) - X(K,JCOMP)
> c              VRELPL(K) = XDOT(K,ICOMP) - XDOT(K,JCOMP)
> c              RIJ2 = RIJ2 + XRELPL(K)**2
> c              VIJ2 = VIJ2 + VRELPL(K)**2
> c              RVI = RVI + XRELPL(K)*VRELPL(K)
> c   58         CONTINUE
> c*
> c          XMBIN = BODY(ICOMP) + BODY(JCOMP)
> c          XMPROD = BODY(ICOMP)*BODY(JCOMP)
> c          XMUE = XMPROD/XMBIN
> c*     --16/05/16 17:03-qishu-debug----------------------------*
> c***** Note:--------------------------------------------------**
> c*          EBp only for planets
> c          EBp = VIJ2/2.D0 - XMBIN/DSQRT(RIJ2)
> c          SEMI = XMBIN/(2.D0*DABS(EBp))
> c*     --16/05/16 17:03-qishu-end------------------------------*
> c          ECC2 = (1.0 - DSQRT(RIJ2)/SEMI)**2 +
> c     &                             RVI**2/(SEMI*XMBIN)
> c          ECC = DSQRT(ECC2) 
> c          PERIOD = SEMI**1.5D0/DSQRT(XMBIN)
> c*     --16/05/07 15:38-qishu-debug----------------------------*
> c***** Note:--------------------------------------------------**
> cc        if (ECC .lt. 1) then
> c        if(rank.eq.0)then
> c        if (ECC .lt. 1 .or.  DSQRT(RIJ2)*206264.81 .lt. 10000) then
> c            print *,'------------->>>>>>>>>>'
> c            print *,'i,j',ICOMP,JCOMP
> c            print *,'body i,j:',body(ICOMP),body(JCOMP)
> c            print *,'X,Y,Z i,j:',X(1:3,ICOMP),X(1:3,JCOMP)
> c            print *,'VX,VY,VZ i,j:',XDOT(1:3,ICOMP),XDOT(1:3,JCOMP)
> cc            print *,'RAU',RAU
> c            PRINT*,'distance/AU, Semi/AU, Ecc, Period/YRS=',
> c     &      DSQRT(RIJ2)*206264.81, SEMI*RAU,ECC,PERIOD*YRS
> c        end if
> c        end if
> c*     --16/05/07 15:38-qishu-end------------------------------*
> c*
> c*
> c        IF(SEMI.LT.SMMIN)SMMIN=SEMI
> c        IF(SEMI.GT.SMMAX)SMMAX=SEMI
> c        IF(ECC.LT.ECCMIN)ECCMIN=ECC
> c        IF(ECC.GT.ECCMAX)ECCMAX=ECC
> c        IF(PERIOD.LT.TMMIN)TMMIN=PERIOD
> c        IF(PERIOD.GT.TMMAX)TMMAX=PERIOD
> c        EBH = -1.D10
> c        RMIN2 = RMIN*RMIN
> c        IF(RXMIN2.LT.RMIN2)CALL KSREG
> c        CALL FLUSH(6)
> c        if(rank.eq.0.AND.SEMI.LT.RMIN2)then
> c                  CALL FLUSH(6)
> c        end if
> c              END IF
> c   51     CONTINUE
> c*
> c      if(rank.eq.0)then
> c          PRINT*,' Min/Max Semi in AU=',SMMIN*RAU,SMMAX*RAU
> c          PRINT*,' Min/Max Ecc=',ECCMIN,ECCMAX
> c          PRINT*,' Min/Max Period in Yrs=',TMMIN*YRS,TMMAX*YRS
> c      end if
> c*
> c      END IF
> c*
> c      IF (NBIN0.GT.0.OR.nmass.gt.0) THEN
> c*
> c*       Check initial neighbour lists again.
> c          DO 95 I = IFIRST,NTOT
> c              IF(I.GT.N)THEN
> c              ICOMP = 2*IPAIR - 1
> c              JCOMP = 2*IPAIR
> c                  RS0 = RS(ICOMP)
> c              ELSE
> c                  RS0 = RC
> c              END IF
> c                  CALL NBLIST(I,RS0)
> c   95     CONTINUE
> c*
> c      END IF
