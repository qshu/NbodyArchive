1c1
<       subroutine custom_output(NXTLEN,NXTLST,NXTLIMIT,NGHOSTS,IMINR)
---
>       subroutine custom_output(NXTLEN,NXTLST,NXTLIMIT,NGHOSTS)
4a5,7
> *
> *     Completion and upgrade Aug. 2021 (Rainer Spurzem)
> *     Added FDOT, FDSCALE
7c10
< *     single: NAME, M[M*], X(1:3)[pc], V(1:3)[km/s],
---
> *     single: NAME, M[M*], X(1:3)[pc], V(1:3)[km/s], POT[NB],
11,12c14,15
< *             VCM(1:3)[km/s], XREL(1:3)[AU], VREL(1:3)[km/s],
< *             semi[AU], ecc, P[days],
---
> *             VCM(1:3)[km/s], XREL(1:3)[AU], VREL(1:3)[km/s], POT[NB],
> *             semi[AU], ecc, P[days], Gamma,
19c22
< *             XREL1(1:3)[AU], VREL1(1:3)[km/s],
---
> *             XREL1(1:3)[AU], VREL1(1:3)[km/s],POT[NB],
21d23
< *             K*1, K*2, K*3, K*(INCM), 
23a26
> *             K*1, K*2, K*3, K*(INCM), 
25c28,30
< *     (sinlge parameter: 0/1, means inner binary components, 3 means outer component )
---
> *     (single parameter: 1/2, means inner binary components, 3 means outer component )
> *     (merger parameter: 0 inner binary, 1 outer binary)
> *     (POT: potential, sum of - G m_j/r_j)
28d32
< 
31c35,38
<       PARAMETER  (NMX=10,NMX3=3*NMX,NMXm=NMX*(NMX-1)/2)
---
>       include 'galaxy.h'
>       include 'output.h'
>       include 'scale_out.h'
>       PARAMETER  (NMX=10,NMX3=3*NMX,NMXm=NMX*(NMX-1)/2,GALIMIT=0.1D0)
41a49
>       COMMON/POTDEN/  RHO(NMAX),XNDBL(NMAX),PHIDBL(NMAX)
44,105c52,54
< *     single
<       COMMON/OUTSINGLE/ S_M(NMAX),S_X1(NMAX), S_X2(NMAX), S_X3(NMAX),
<      &                  S_V1(NMAX), S_V2(NMAX), S_V3(NMAX),
< C     &                  S_F1(NMAX), S_F2(NMAX), S_F3(NMAX),
<      &                  S_RS(NMAX), S_L(NMAX), S_TE(NMAX),
<      &                  S_RC(NMAX), S_MC(NMAX),
<      &                  NS_KW(NMAX),NS_NAM(NMAX)
<       REAL*4 S_M, S_X1, S_X2, S_X3, S_V1, S_V2, S_V3
< C      REAL*4 S_F1, S_F2, S_F3
<       REAL*4 S_RS, S_L, S_TE, S_RC, S_MC
<       INTEGER NS_KW,NS_NAM,NLOOP
< *     Binary
<       COMMON/OUTBINARY/ B_M1(KMAX), B_M2(KMAX),
<      &                  B_XC1(KMAX), B_XC2(KMAX), B_XC3(KMAX),
<      &                  B_VC1(KMAX), B_VC2(KMAX), B_VC3(KMAX), 
<      &                  B_XR1(KMAX), B_XR2(KMAX), B_XR3(KMAX), 
<      &                  B_VR1(KMAX), B_VR2(KMAX), B_VR3(KMAX), 
< C     &                  B_FC1(KMAX), B_FC2(KMAX), B_FC3(KMAX), 
<      &                  B_RS1(KMAX), B_L1(KMAX), B_TE1(KMAX),
<      &                  B_RS2(KMAX), B_L2(KMAX), B_TE2(KMAX),
<      &                  B_RC1(KMAX), B_MC1(KMAX), B_RC2(KMAX), 
<      &                  B_MC2(KMAX), B_A(KMAX), B_ECC(KMAX), B_P(KMAX),
<      &                  NB_KW1(KMAX), NB_NAM1(KMAX), NB_KW2(KMAX), 
<      &                  NB_NAM2(KMAX), NB_KWC(KMAX), NB_NAMC(KMAX)
<       REAL*4 B_M1, B_M2, B_XC1, B_XC2, B_XC3, B_VC1, B_VC2, B_VC3
<       REAL*4 B_XR1, B_XR2, B_XR3, B_VR1, B_VR2, B_VR3
< C      REAL*4 B_FC1, B_FC2, B_FC3
<       REAL*4 B_RS1, B_L1, B_TE1, B_RS2, B_L2, B_TE2
<       REAL*4 B_RC1, B_MC1, B_RC2, B_MC2,B_A, B_ECC, B_P
<       INTEGER NB_KW1, NB_NAM1, NB_KW2, NB_NAM2, NB_KWC, NB_NAMC
< *     Merger
<       COMMON/OUTMERGER/ M_M1(MMAX), M_M2(MMAX), M_M3(MMAX),
<      &                  M_XC1(MMAX), M_XC2(MMAX), M_XC3(MMAX),
<      &                  M_VC1(MMAX), M_VC2(MMAX), M_VC3(MMAX),
<      &                  M_XR01(MMAX), M_XR02(MMAX), M_XR03(MMAX), 
<      &                  M_VR01(MMAX), M_VR02(MMAX), M_VR03(MMAX), 
<      &                  M_XR11(MMAX), M_XR12(MMAX), M_XR13(MMAX), 
<      &                  M_VR11(MMAX), M_VR12(MMAX), M_VR13(MMAX), 
< C     &                  M_FC1(MMAX), M_FC2(MMAX), M_FC3(MMAX),
<      &                  M_RS1(MMAX), M_L1(MMAX), M_TE1(MMAX), 
<      &                  M_RS2(MMAX), M_L2(MMAX), M_TE2(MMAX), 
<      &                  M_RS3(MMAX), M_L3(MMAX), M_TE3(MMAX), 
<      &                  M_RC1(MMAX), M_MC1(MMAX), M_RC2(MMAX), 
<      &                  M_MC2(MMAX), M_RC3(MMAX), M_MC3(MMAX),
<      &                  M_A0(MMAX), M_ECC0(MMAX), M_P0(MMAX),
<      &                  M_A1(MMAX), M_ECC1(MMAX), M_P1(MMAX),
<      &                  NM_KW1(MMAX), NM_NAM1(MMAX), NM_KW2(MMAX),
<      &                  NM_NAM2(MMAX), NM_KW3(MMAX), NM_NAM3(MMAX),
<      &                  NM_KWC(MMAX), NM_NAMC(MMAX)
<       REAL*4 M_M1, M_M2, M_M3, M_XC1, M_XC2, M_XC3, M_VC1, M_VC2, M_VC3
<       REAL*4 M_XR01, M_XR02, M_XR03, M_VR01, M_VR02, M_VR03
<       REAL*4 M_XR11, M_XR12, M_XR13, M_VR11, M_VR12, M_VR13
< C      REAL*4 M_FC1, M_FC2, M_FC3
<       REAL*4 M_RS1, M_L1, M_TE1, M_RS2, M_L2, M_TE2, M_RS3, M_L3, M_TE3
<       REAL*4 M_RC1, M_MC1, M_RC2, M_MC2, M_RC3, M_MC3
<       REAL*4 M_A0, M_ECC0, M_P0, M_A1, M_ECC1, M_P1
<       INTEGER NM_KW1, NM_NAM1, NM_KW2, NM_NAM2
<       INTEGER NM_KW3, NM_NAM3, NM_KWC, NM_NAMC
< 
<       REAL*8 RSCALE_OUT,MSCALE_OUT,VSCALE_OUT,RAU_OUT,TSCALE_OUT
< *      
<       INTEGER NXTLST(NMAX),IMINR(NMAX),IWBINC
---
>       INTEGER NLOOP
> *
>       INTEGER NXTLST(NMAX),IWBINC
107a57
>       REAL*8 F2DOT(3),F3DOT(3),F2DOT2(3),F3DOT2(3),ONE24,ONE120
110c60,61
<       
---
>       PARAMETER  (ONE24=1.0/24.0D0,ONE120=1.0/120.0D0)
> *      
116c67
< 
---
> *
120a72
>          DSCALE_OUT=1.0
124a77,82
>          FSCALE_OUT=1.0
>          FDSCALE_OUT=1.0
>          POTSCALE_OUT=1.0
>          G_OUT=1.0
>          D2SCALE_OUT=1.0
>          D3SCALE_OUT=1.0
128a87
>          DSCALE_OUT=ZMBAR/RBAR**3
131a91,96
>          G_OUT=4.302E-3
>          POTSCALE_OUT=G_OUT*MSCALE_OUT/RSCALE_OUT
>          FSCALE_OUT=G_OUT*(MSCALE_OUT/RSCALE_OUT)**2
>          FDSCALE_OUT=FSCALE_OUT/TSCALE_OUT
>          D2SCALE_OUT=FDSCALE_OUT/TSCALE_OUT
>          D3SCALE_OUT=D2SCALE_OUT/TSCALE_OUT
139c104,106
<       
---
>  
> *     if(rank.eq.0)print*,' IN ttot,nloop,nxtlen,nxtlimit=',
> *    &  ttot,nloop,nxtlen,nxtlimit     
153,179c120,132
< *     
< *     --10/18/14 18:04-lwang-debug--------------------------------------*
< ***** Note:------------------------------------------------------------**
< c$$$         IF (NXTLEN.GT.60.and.TTOT.NE.0.D0) THEN
< c$$$            RRMIN = 1.E6
< c$$$            I2 = IMINR(I)
< c$$$            DO L = 2, LIST(1,I)+1
< c$$$               K = LIST(L,I)
< c$$$               RRC = 0.D0
< c$$$               call jpred(K,time,time)
< c$$$               DO KK =1,3
< c$$$                  RRC = RRC + (X(KK,K)-X(KK,I))**2
< c$$$               END DO
< c$$$               IF (RRC.LT.RRMIN) THEN
< c$$$                  IIC = K
< c$$$                  RRMIN = RRC
< c$$$               END IF
< c$$$               IF (K.EQ.I2) RRI2 = RRC
< c$$$            END DO
< c$$$            IF(IIC.NE.I2.and.LIST(1,I).NE.0) THEN
< c$$$            print*,'J',J,'I1',I,'I2',I2,'IIC',IIC,'RM',RRMIN,'RI2',RRI2,
< c$$$     &              'NNB',LIST(1,I),'TIME',TIME,'RS',RS(I),'X',X(1:3,I)
< c$$$            call flush(6)
< c$$$            END IF
< c$$$            IF (J.GE.NXTLEN) call abort()
< c$$$         END IF
< *     --10/18/14 18:04-lwang-end----------------------------------------*
---
> *
> *      Store F2DOT, F3DOT ready for Taylor series with factor as F,FDOT
>          DTR = TIME - T0R(I)
>       DO 30 K = 1,3
>           F2DOT(K) = ONE24*(D3R(K,I)*DTR+D2R(K,I) + D3(K,I)*S+D2(K,I))
>           F3DOT(K) = ONE120*(D3R(K,I) + D3(K,I))
>  30   CONTINUE
> *     if(rank.eq.0)print*,' i,time,dtr,s,d2,d3=',
> *    &  i,time,dtr,s,d2(1,i),d3(1,i)
> *     if(rank.eq.0)print*,' i,time,dtr,s,d2r,d3r=',
> *    &  i,time,dtr,s,d2r(1,i),d3r(1,i)
> *     if(rank.eq.0)print*,' i,time,dtr,s,f2,f3=',
> *    &  i,time,dtr,s,f2dot(1),f3dot(1)
183,185c136
<             N_BINARY = N_BINARY + 1
<             IK = N_BINARY
<             IPAIR = I - N
---
>                IPAIR = I - N
189,191c140,145
<             NB_NAMC(IK) = NAME(I)
<             NB_NAM1(IK) = NAME(J1)
<             NB_NAM2(IK) = NAME(J2)
---
>             if (GAMMA(IPAIR).LT.GALIMIT.AND.H(IPAIR).LT.0) THEN
>                N_BINARY = N_BINARY + 1
>                IK = N_BINARY
>                NB_NAMC(IK) = NAME(I)
>                NB_NAM1(IK) = NAME(J1)
>                NB_NAM2(IK) = NAME(J2)
193,209c147,178
<             B_M1(IK) = REAL(BODY(J1)*MSCALE_OUT)
<             B_M2(IK) = REAL(BODY(J2)*MSCALE_OUT)
<             B_XC1(IK) = REAL(X(1,I)*RSCALE_OUT) 
<             B_XC2(IK) = REAL(X(2,I)*RSCALE_OUT) 
<             B_XC3(IK) = REAL(X(3,I)*RSCALE_OUT) 
<             B_VC1(IK) = REAL(XDOT(1,I)*VSCALE_OUT) 
<             B_VC2(IK) = REAL(XDOT(2,I)*VSCALE_OUT) 
<             B_VC3(IK) = REAL(XDOT(3,I)*VSCALE_OUT) 
<             B_XR1(IK) = REAL(XIREL(1)*RAU_OUT) 
<             B_XR2(IK) = REAL(XIREL(2)*RAU_OUT) 
<             B_XR3(IK) = REAL(XIREL(3)*RAU_OUT) 
<             B_VR1(IK) = REAL(VIREL(1)*VSCALE_OUT) 
<             B_VR2(IK) = REAL(VIREL(2)*VSCALE_OUT) 
<             B_VR3(IK) = REAL(VIREL(3)*VSCALE_OUT) 
< C            B_FC1(IK) = F(1,I)
< C            B_FC2(IK) = F(2,I)
< C            B_FC3(IK) = F(3,I)
---
>                B_M1(IK) = REAL(BODY(J1)*MSCALE_OUT)
>                B_M2(IK) = REAL(BODY(J2)*MSCALE_OUT)
>                B_XC1(IK) = REAL(X(1,I)*RSCALE_OUT) 
>                B_XC2(IK) = REAL(X(2,I)*RSCALE_OUT) 
>                B_XC3(IK) = REAL(X(3,I)*RSCALE_OUT) 
>                B_VC1(IK) = REAL(XDOT(1,I)*VSCALE_OUT) 
>                B_VC2(IK) = REAL(XDOT(2,I)*VSCALE_OUT) 
>                B_VC3(IK) = REAL(XDOT(3,I)*VSCALE_OUT) 
>                B_XR1(IK) = REAL(XIREL(1)*RSCALE_OUT) 
>                B_XR2(IK) = REAL(XIREL(2)*RSCALE_OUT) 
>                B_XR3(IK) = REAL(XIREL(3)*RSCALE_OUT) 
>                B_VR1(IK) = REAL(VIREL(1)*VSCALE_OUT) 
>                B_VR2(IK) = REAL(VIREL(2)*VSCALE_OUT) 
>                B_VR3(IK) = REAL(VIREL(3)*VSCALE_OUT) 
>                B_FC1(IK) = REAL(F(1,I)*FSCALE_OUT)
>                B_FC2(IK) = REAL(F(2,I)*FSCALE_OUT)
>                B_FC3(IK) = REAL(F(3,I)*FSCALE_OUT)
>                B_FDC1(IK) = REAL(FDOT(1,I)*FDSCALE_OUT)
>                B_FDC2(IK) = REAL(FDOT(2,I)*FDSCALE_OUT)
>                B_FDC3(IK) = REAL(FDOT(3,I)*FDSCALE_OUT)
>                B_D21(IK) = REAL(F2DOT(1)*D2SCALE_OUT)
>                B_D22(IK) = REAL(F2DOT(2)*D2SCALE_OUT)
>                B_D23(IK) = REAL(F2DOT(3)*D2SCALE_OUT)
>                B_D31(IK) = REAL(F3DOT(1)*D3SCALE_OUT)
>                B_D32(IK) = REAL(F3DOT(2)*D3SCALE_OUT)
>                B_D33(IK) = REAL(F3DOT(3)*D3SCALE_OUT)
>                B_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
>                B_G(IK)   = REAL(GAMMA(IPAIR))
>                B_STEP(IK) = REAL(STEP(I)*TSCALE_OUT)
>                B_STEPR(IK) = REAL(STEPR(I)*TSCALE_OUT)
>                B_T0(IK) = REAL(T0(I)*TSCALE_OUT)
>                B_T0R(IK) = REAL(T0R(I)*TSCALE_OUT)
211,217c180,186
<             IF (KZ(12).GT.0) THEN
<                call sev_one_star(J1,NB_KW1(IK),B_RS1(IK),B_L1(IK),
<      &              B_TE1(IK),B_MC1(IK),B_RC1(IK),B_M1(IK))
<                call sev_one_star(J2,NB_KW2(IK),B_RS2(IK),B_L2(IK),
<      &              B_TE2(IK),B_MC2(IK),B_RC2(IK),B_M2(IK))
<             END IF
<             NB_KWC(IK) = KSTAR(I)
---
>                IF (KZ(12).GT.0) THEN
>                   call sev_one_star(J1,NB_KW1(IK),B_RS1(IK),B_L1(IK),
>      &                 B_TE1(IK),B_MC1(IK),B_RC1(IK),B_M1(IK))
>                   call sev_one_star(J2,NB_KW2(IK),B_RS2(IK),B_L2(IK),
>      &                 B_TE2(IK),B_MC2(IK),B_RC2(IK),B_M2(IK))
>                END IF
>                NB_KWC(IK) = KSTAR(I)
219,223c188,224
<             SEMI = -0.5*BODY(I)/H(IPAIR)
<             B_ECC(IK) = REAL(SQRT((1.0D0 - R(IPAIR)/SEMI)**2+
<      &           TDOT2(IPAIR)**2/(BODY(I)*SEMI)))
<             B_P(IK) = REAL(DAYS_OUT*SEMI*SQRT(ABS(SEMI)/BODY(I)))
<             B_A(IK) = REAL(SEMI*RAU_OUT)
---
>                SEMI = -0.5*BODY(I)/H(IPAIR)
>                B_ECC(IK) = REAL(SQRT((1.0D0 - R(IPAIR)/SEMI)**2+
>      &              TDOT2(IPAIR)**2/(BODY(I)*SEMI)))
>                B_P(IK) = REAL(DAYS_OUT*SEMI*SQRT(ABS(SEMI)/BODY(I)))
>                B_A(IK) = REAL(SEMI*RAU_OUT)
>             END IF
> *     If perturbation is too strong (Gamma>GALIMIT) or the binding energy is positive, the K.S. may not be a binary.
> *     Save binary members and c.m. as single particles in any case (R.Sp. Aug 2021).
>                TMASK(J1) = TTOT
>                TMASK(J2) = TTOT
>                TMASK(I)  = TTOT
>                N_SINGLE = N_SINGLE + 1
>                IK = N_SINGLE
>                call custom_store_single(J1,IK)
> *     correction for the force and potential / D2 / D3 missing R.Sp.
>                DR3I = BODY(J2)/R(IPAIR)**3
>                S_F1(IK) = S_F1(IK) - REAL(XIREL(1)*DR3I*FSCALE_OUT)
>                S_F2(IK) = S_F2(IK) - REAL(XIREL(2)*DR3I*FSCALE_OUT)
>                S_F3(IK) = S_F3(IK) - REAL(XIREL(3)*DR3I*FSCALE_OUT)
>                S_POT(IK) = S_POT(IK) -
>      &              REAL(BODY(J2)/R(IPAIR)*POTSCALE_OUT)
> 
>                N_SINGLE = N_SINGLE + 1
>                IK = N_SINGLE
>                call custom_store_single(J2,IK)
> *     correction for the force and potential
>                DR3I = -BODY(J1)/R(IPAIR)**3
>                S_F1(IK) = S_F1(IK) - REAL(XIREL(1)*DR3I*FSCALE_OUT) 
>                S_F2(IK) = S_F2(IK) - REAL(XIREL(2)*DR3I*FSCALE_OUT) 
>                S_F3(IK) = S_F3(IK) - REAL(XIREL(3)*DR3I*FSCALE_OUT) 
>                S_POT(IK) = S_POT(IK) -
>      &              REAL(BODY(J1)/R(IPAIR)*POTSCALE_OUT)
> *     add also c.m. (R.Sp. Aug 2021).
>                N_SINGLE = N_SINGLE + 1
>                IK = N_SINGLE
>                call custom_store_single(I,IK)
> *             
281c282
<      &                 TDOT2(JPAIR),XIREL,VIREL,KSTAR(IG))
---
>      &                 TDOT2(JPAIR),XIREL,VIREL,KSTAR(IG),GAMMA(JPAIR))
288a290
>                   S_RSN(IK) = REAL(RS(J2)*RSCALE_OUT)
295,297c297,314
< C                  S_F1(IK) = F(1,I)
< C                  S_F2(IK) = F(2,I)
< C                  S_F3(IK) = F(3,I)
---
>                   S_F1(IK) = REAL(F(1,I)*FSCALE_OUT) 
>                   S_F2(IK) = REAL(F(2,I)*FSCALE_OUT) 
>                   S_F3(IK) = REAL(F(3,I)*FSCALE_OUT) 
>                   S_FD1(IK) = REAL(FDOT(1,I)*FDSCALE_OUT) 
>                   S_FD2(IK) = REAL(FDOT(2,I)*FDSCALE_OUT) 
>                   S_FD3(IK) = REAL(FDOT(3,I)*FDSCALE_OUT) 
>                   S_D21(IK) = REAL(F2DOT(1)*D2SCALE_OUT)
>                   S_D22(IK) = REAL(F2DOT(2)*D2SCALE_OUT)
>                   S_D23(IK) = REAL(F2DOT(3)*D2SCALE_OUT)
>                   S_D31(IK) = REAL(F3DOT(1)*D3SCALE_OUT)
>                   S_D32(IK) = REAL(F3DOT(2)*D3SCALE_OUT)
>                   S_D33(IK) = REAL(F3DOT(3)*D3SCALE_OUT)
>                   S_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
>                   S_STEP(IK) = REAL(STEP(I)*TSCALE_OUT)
>                   S_STEPR(IK) = REAL(STEPR(I)*TSCALE_OUT)
>                   S_T0(IK) = REAL(T0(I)*TSCALE_OUT)
>                   S_T0R(IK) = REAL(T0R(I)*TSCALE_OUT)
> 
350c367
<      &              XREL(1,IM),VREL(1,IM),KSTARM(IM))
---
>      &              XREL(1,IM),VREL(1,IM),KSTARM(IM),GALIMIT)
357c374
<      &              XIREL,VIREL,KSTAR(I2))
---
>      &              XIREL,VIREL,KSTAR(I2),GALIMIT)
366c383,387
<             M_VC3(IK) = REAL(XDOT(3,ICM)*VSCALE_OUT) 
---
>             M_VC3(IK) = REAL(XDOT(3,ICM)*VSCALE_OUT)
>             M_FC1(IK) = REAL(F(1,ICM)*FSCALE_OUT)
>             M_FC2(IK) = REAL(F(2,ICM)*FSCALE_OUT)
>             M_FC3(IK) = REAL(F(3,ICM)*FSCALE_OUT)
>             M_POT(IK) = REAL(-PHIDBL(ICM)*POTSCALE_OUT)
371,373c392,394
<                M_XR11(IK) = REAL(XIREL(1)*RAU_OUT)
<                M_XR12(IK) = REAL(XIREL(2)*RAU_OUT)
<                M_XR13(IK) = REAL(XIREL(3)*RAU_OUT)
---
>                M_XR11(IK) = REAL(XIREL(1)*RSCALE_OUT)
>                M_XR12(IK) = REAL(XIREL(2)*RSCALE_OUT)
>                M_XR13(IK) = REAL(XIREL(3)*RSCALE_OUT)
379,381c400,402
<                M_XR11(IK) = REAL(XREL(1,IM2)*RAU_OUT) 
<                M_XR12(IK) = REAL(XREL(2,IM2)*RAU_OUT) 
<                M_XR13(IK) = REAL(XREL(3,IM2)*RAU_OUT) 
---
>                M_XR11(IK) = REAL(XREL(1,IM2)*RSCALE_OUT) 
>                M_XR12(IK) = REAL(XREL(2,IM2)*RSCALE_OUT) 
>                M_XR13(IK) = REAL(XREL(3,IM2)*RSCALE_OUT) 
386,388c407,409
<             M_XR01(IK) = REAL(XREL(1,IM)*RAU_OUT) 
<             M_XR02(IK) = REAL(XREL(2,IM)*RAU_OUT) 
<             M_XR03(IK) = REAL(XREL(3,IM)*RAU_OUT) 
---
>             M_XR01(IK) = REAL(XREL(1,IM)*RSCALE_OUT) 
>             M_XR02(IK) = REAL(XREL(2,IM)*RSCALE_OUT) 
>             M_XR03(IK) = REAL(XREL(3,IM)*RSCALE_OUT) 
394c415
<             M_M3(IK) = REAL(BODY(J2)*MSCALE_OUT) 
---
>             M_M3(IK) = REAL(BODY(J2)*MSCALE_OUT)
478a500
>                S_RSN(IK) = REAL(RS(L)*RSCALE_OUT)
484a507,510
>                S_F1(IK) = REAL(F(1,I)*FSCALE_OUT) 
>                S_F2(IK) = REAL(F(2,I)*FSCALE_OUT) 
>                S_F3(IK) = REAL(F(3,I)*FSCALE_OUT) 
>                S_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
532a559,560
> *           if(rank.eq.0.and.abs(ttot-1.d0).lt.1.e-04)
> *    &    write(6,*)' s ',i,name(i),tmask(i),n_single
540c568,569
<             call JPRED_int(I2,TIME)
---
>             ttime = TIME
>             call JPRED_int(I2,ttime)
543a573,574
>             S2 = TIME - T0(I2)
>             DTR2 = TIME - T0R(I2)
549a581,583
> *      Store F2DOT2, F3DOT2 for I2 ready for Taylor series with factor as F,FDOT
>       F2DOT2(K) = ONE24*(D3R(K,I2)*DTR2+D2R(K,I2)+D3(K,I2)*S2+D2(K,I2))
>       F3DOT2(K) = ONE120*(D3R(K,I2) + D3(K,I2))
556c590
<             IF (SEMI.GT.0.0.AND.SEMI.LT.1.0*RSCALE) THEN
---
>             IF (SEMI.GT.0.0.AND.SEMI.LT.0.1*RSCALE) THEN
562a597,599
> *           if(rank.eq.0.and.abs(ttot-1.d0).lt.1.e-04)
> *    &    write(6,*)' wb ',i,name(i),tmask(i),n_binary,i2,name(i2),
> *    &                tmask(i2)
583,585c620,652
<                B_XR1(IK) = REAL(XIREL(1)*RAU_OUT) 
<                B_XR2(IK) = REAL(XIREL(2)*RAU_OUT) 
<                B_XR3(IK) = REAL(XIREL(3)*RAU_OUT) 
---
>                B_FC1(IK) = REAL((BODY(I)*F(1,I)+BODY(I2)*F(1,I2))
>      &              /ZMB*FSCALE_OUT)
>                B_FC2(IK) = REAL((BODY(I)*F(2,I)+BODY(I2)*F(2,I2))
>      &              /ZMB*FSCALE_OUT)
>                B_FC3(IK) = REAL((BODY(I)*FDOT(3,I)+BODY(I2)*FDOT(3,I2))
>      &              /ZMB*FSCALE_OUT)
>                B_FDC1(IK) = REAL((BODY(I)*FDOT(1,I)+BODY(I2)*FDOT(1,I2))
>      &              /ZMB*FDSCALE_OUT)
>                B_FDC2(IK) = REAL((BODY(I)*FDOT(2,I)+BODY(I2)*FDOT(2,I2))
>      &              /ZMB*FDSCALE_OUT)
>                B_FDC3(IK) = REAL((BODY(I)*FDOT(3,I)+BODY(I2)*FDOT(3,I2))
>      &              /ZMB*FDSCALE_OUT)
>                B_D21(IK) = REAL((BODY(I)*F2DOT(1)+BODY(I2)*F2DOT2(1))
>      &              /ZMB*D2SCALE_OUT)
>                B_D22(IK) = REAL((BODY(I)*F2DOT(2)+BODY(I2)*F2DOT2(2))
>      &              /ZMB*D2SCALE_OUT)
>                B_D23(IK) = REAL((BODY(I)*F2DOT(3)+BODY(I2)*F2DOT2(3))
>      &              /ZMB*D2SCALE_OUT)
>                B_D21(IK) = REAL((BODY(I)*F2DOT(1)+BODY(I2)*F2DOT2(1))
>      &              /ZMB*D2SCALE_OUT)
>                B_D22(IK) = REAL((BODY(I)*F2DOT(2)+BODY(I2)*F2DOT2(2))
>      &              /ZMB*D2SCALE_OUT)
>                B_D23(IK) = REAL((BODY(I)*F2DOT(3)+BODY(I2)*F2DOT2(3))
>      &              /ZMB*D2SCALE_OUT)
>                B_D31(IK) = REAL((BODY(I)*F3DOT(1)+BODY(I2)*F3DOT2(1))
>      &              /ZMB*D3SCALE_OUT)
>                B_D32(IK) = REAL((BODY(I)*F3DOT(2)+BODY(I2)*F3DOT2(2))
>      &              /ZMB*D3SCALE_OUT)
>                B_D33(IK) = REAL((BODY(I)*F3DOT(3)+BODY(I2)*F3DOT2(3))
>      &              /ZMB*D3SCALE_OUT)
>                B_XR1(IK) = REAL(XIREL(1)*RSCALE_OUT) 
>                B_XR2(IK) = REAL(XIREL(2)*RSCALE_OUT) 
>                B_XR3(IK) = REAL(XIREL(3)*RSCALE_OUT) 
589,593c656,659
<                DR3I = REAL(BODY(I2)/(RIJ2*RIJ))
< *     Only estimate the c.m. force at the first component position
< C               B_FC1(IK) = F(1,I) + XIREL(1)*DR3I
< C               B_FC2(IK) = F(2,I) + XIREL(2)*DR3I
< C               B_FC3(IK) = F(3,I) + XIREL(3)*DR3I
---
>                DR3I = BODY(I2)/(RIJ2*RIJ)
>                B_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
> *     Assume small perturbation (R.Sp. Oct. 2021)
>                B_G(IK) = 0.D0
608c674,684
< *     Continue
---
> *     Treat also as single star (R.Sp. added Aug. 2021).
>                TMASK(I) = TTOT
>                TMASK(I2) = TTOT
> *          if(rank.eq.0.and.abs(ttot-1.d0).lt.1.e-04)
> *    &    write(6,*)' ws ',i,name(i),tmask(i),n_single
>                N_SINGLE = N_SINGLE + 1
>                call custom_store_single(I,N_SINGLE)
> *          if(rank.eq.0.and.abs(ttot-1.d0).lt.1.e-04)
> *    &    write(6,*)' ws ',i,name(i),tmask(i),n_single
>                N_SINGLE = N_SINGLE + 1
>                call custom_store_single(I2,N_SINGLE)
612a689,690
> *           if(rank.eq.0.and.abs(ttot-1.d0).lt.1.e-04)
> *    &    write(6,*)' s2 ',i,name(i),tmask(i),n_single
615c693
< *     CONTINUE
---
> *     continue
621,631d698
<       
< *     output
< *     --10/25/14 22:16-lwang-debug--------------------------------------*
< ***** Note:------------------------------------------------------------**
<       if(rank.eq.0) print*,'CUSTOM OUTPUT: TTOT',TTOT,'N_SINGLE',
<      &     N_SINGLE,'N_BINARY',N_BINARY,'N_MERGER',N_MERGER
< c$$$      print*,'NS_NAM',NS_NAM(1:5),'S_M',S_M(1:5),'S_X1',S_X1(1:5),
< c$$$     &     'S_V1',S_V1(1:5),'NS_KW',NS_KW(1:5),'S_RS',S_RS(1:5),
< c$$$     &     'S_L',S_L(1:5),'S_TE',S_TE(1:5),'S_MC',S_MC(1:5),'S_RC',
< c$$$     &     S_RC(1:5)
< *     --10/25/14 22:16-lwang-end----------------------------------------*
632a700,755
> *     Prepare global quantities for writing
>           S_AS(1) = REAL(TTOT)
>           S_AS(2) = REAL(FLOAT(NPAIRS))
>           S_AS(3) = REAL(RBAR)
>           S_AS(4) = REAL(ZMBAR)
>           S_AS(5) = REAL(FLOAT(N))
>           S_AS(6) = REAL(TSTAR)
>           S_AS(7) = REAL(RDENS(1))
>           S_AS(8) = REAL(RDENS(2))
>           S_AS(9) = REAL(RDENS(3))
>           S_AS(10) = REAL(TTOT/TCR0)
>           S_AS(11) = REAL(TSCALE)
>           S_AS(12) = REAL(VSTAR)
>           S_AS(13) = REAL(RC)
>           S_AS(14) = REAL(NC)
>           S_AS(15) = REAL(VC)
>           S_AS(16) = REAL(RHOM)
>           S_AS(17) = REAL(CMAX)
>           S_AS(18) = REAL(RSCALE)
>           S_AS(19) = REAL(RSMIN)
>           S_AS(20) = REAL(DMIN1)
>           S_AS(21) = REAL(RG(1))
>           S_AS(22) = REAL(RG(2))
>           S_AS(23) = REAL(RG(3))
>           S_AS(24) = REAL(VG(1))
>           S_AS(25) = REAL(VG(2))
>           S_AS(26) = REAL(VG(3))
>           S_AS(27) = REAL(TIDAL(1))
>           S_AS(28) = REAL(TIDAL(2))
>           S_AS(29) = REAL(TIDAL(3))
>           S_AS(30) = REAL(TIDAL(4))
>           S_AS(31) = REAL(GMG)
>           S_AS(32) = REAL(OMEGA)
>           S_AS(33) = REAL(DISK)
>           S_AS(34) = REAL(A)
>           S_AS(35) = REAL(B)
>           S_AS(36) = REAL(ZMET)
>           S_AS(37:56) = REAL(ZPARS(1:20))
>           S_AS(57) = REAL(ETAI)
>           S_AS(58) = REAL(ETAR)
>           S_AS(59) = REAL(ETAU)
>           S_AS(60) = REAL(ECLOSE)
>           S_AS(61) = REAL(DTMIN)
>           S_AS(62) = REAL(RMIN)
>           S_AS(63) = REAL(GMIN)
>           S_AS(64) = REAL(GMAX)
>           S_AS(65) = REAL(SMAX)
>           S_AS(66) = REAL(FLOAT(NNBOPT))
>           S_AS(67) = REAL(EPOCH0)
>           S_AS(68) = REAL(FLOAT(N_SINGLE))
>           S_AS(69) = REAL(FLOAT(N_BINARY))
>           S_AS(70) = REAL(FLOAT(N_MERGER))
> *
> *     output, note N_SINGLE is now N_SYSTEM (R.Sp. Aug. 2021).
>       if(rank.eq.0) print*,'CUSTOM OUTPUT: TTOT',TTOT,'N_SYSTEM',
>      &     N_SINGLE,'N_BINARY',N_BINARY,'N_MERGER',N_MERGER
634,638d756
< c$$$     &     NS_NAM,
< c$$$     &     S_M,S_X1,S_X2,S_X2,S_V1,S_V2,S_V3,
< c$$$     &     S_F1,S_F2,S_F3,
< c$$$     &     NS_KW,S_RS,S_L,S_TE,S_MC,S_RC)
< 
640,647d757
< c$$$     &     NS_NAMC,NS_NAM1,NS_NAM2,
< c$$$     &     B_M1,B_M2,B_XC1,B_XC2,B_XC3,B_VC1,B_VC2,B_VC3,
< c$$$     &     B_XR1,B_XR2,B_XR3,B_VR1,B_VR2,B_VR3,
< c$$$C     &     B_FC1,B_FC2,B_FC3,
< c$$$     &     B_A,B_ECC,B_P,
< c$$$     &     NB_KWC,NB_KW1,NB_KW2,B_RS1,B_RS2,B_L1,B_L2,
< c$$$     &     B_TE1,B_TE2,B_MC1,B_MC2,B_RC1,B_RC2)
< 
649,657c759,766
< c$$$     &     NM_NAMC,NM_NAM1,NM_NAM2,NM_NAM3,
< c$$$     &     M_M1,M_M2,M_M3,M_XC1,M_XC2,M_XC3,M_VC1,M_VC2.M_VC3,
< c$$$     &     M_XR01,M_XR02,M_XR03,M_VR01,M_VR02,M_VR03,
< c$$$     &     M_XR11,M_XR12,M_XR13,M_VR11,M_VR12,M_VR13,
< c$$$C     &     M_FC1,M_FC2,M_FC3,
< c$$$     &     M_A0,M_A2,M_ECC0,M_ECC1,M_P0,M_P1,
< c$$$     &     NM_KWC,NM_KW1,NM_KW2,NM_KW3,
< c$$$     &     M_RS1,M_RS2,M_RS3,M_L1,M_L2,M_L3,M_TE1,M_TE2,M_TE3,
< c$$$     &     M_MC1,M_MC2,M_MC3,M_RC1,M_RC2,M_RC3)
---
> *
>       if (NXTLEN.eq.NXTLIMIT.or.TTOT.eq.0.D0) then
>          ZSM0 = ZSMASS0*MSCALE_OUT
>          ZBM0 = ZBMASS0*MSCALE_OUT
>          call global_output(ZSM0,ZBM0,RC,
>      &        N_SINGLE,N_BINARY,N_MERGER,KZ(7),KZ(19))
>       END IF
>       
669a779
>       include 'scale_out.h'
674,688d783
<       REAL*8 RSCALE_OUT,MSCALE_OUT,VSCALE_OUT,RAU_OUT,TSCALE_OUT
< 
<       IF (KZ(19).EQ.0.AND.KZ(12).EQ.-1) THEN
<          RSCALE_OUT=1.0
<          MSCALE_OUT=1.0
<          VSCALE_OUT=1.0
<          RAU_OUT=1.0
<          TSCALE_OUT=1.0
<       else
<          RSCALE_OUT=RBAR
<          MSCALE_OUT=ZMBAR
<          VSCALE_OUT=VSTAR
<          RAU_OUT=RAU
<          TSCALE_OUT=TSTAR
<       END IF
719,746c814,829
< *     single
<       COMMON/OUTSINGLE/ S_M(NMAX),S_X1(NMAX), S_X2(NMAX), S_X3(NMAX),
<      &                  S_V1(NMAX), S_V2(NMAX), S_V3(NMAX),
< C     &                  S_F1(NMAX), S_F2(NMAX), S_F3(NMAX),
<      &                  S_RS(NMAX), S_L(NMAX), S_TE(NMAX),
<      &                  S_RC(NMAX), S_MC(NMAX),
<      &                  NS_KW(NMAX),NS_NAM(NMAX)
<       REAL*4 S_M, S_X1, S_X2, S_X3, S_V1, S_V2, S_V3
< C      REAL*4 S_F1, S_F2, S_F3
<       REAL*4 S_RS, S_L, S_TE, S_RC, S_MC
<       INTEGER NS_KW,NS_NAM
<       REAL*8 RSCALE_OUT,MSCALE_OUT,VSCALE_OUT,RAU_OUT,TSCALE_OUT
< 
<       IF (KZ(19).EQ.0.AND.KZ(12).EQ.-1) THEN
<          RSCALE_OUT=1.0
<          MSCALE_OUT=1.0
<          VSCALE_OUT=1.0
<          RAU_OUT=1.0
<          TSCALE_OUT=1.0
<       else
<          RSCALE_OUT=RBAR
<          MSCALE_OUT=ZMBAR
<          VSCALE_OUT=VSTAR
<          RAU_OUT=RAU
<          TSCALE_OUT=TSTAR
<       END IF
< 
< *     Name
---
>       include 'galaxy.h'
>       include 'output_single.h'
>       include 'scale_out.h'
>       COMMON/POTDEN/  RHO(NMAX),XNDBL(NMAX),PHIDBL(NMAX)
>       REAL*8 F2DOT(3),F3DOT(3),ONE24,ONE120,S,DTR
>       PARAMETER  (ONE24=1.0/24.0D0,ONE120=1.0/120.0D0)
> C*     single
>           S = TIME - T0(I)
>           DTR = TIME - T0R(I)
> *      Store F2DOT, F3DOT ready for Taylor series with factor as F,FDOT
>       DO 30 K = 1,3
>           F2DOT(K) = ONE24*(D3R(K,I)*DTR+D2R(K,I) + D3(K,I)*S+D2(K,I))
>           F3DOT(K) = ONE120*(D3R(K,I) + D3(K,I))
>  30   CONTINUE
> *
> *     Name and Label for binary members / c.m. (R.Sp. Aug. 2021).
747a831,833
>       NS_LAB(IK) = 0
>       IF(I.LT.IFIRST)NS_LAB(IK) = -1
>       IF(I.GT.N)NS_LAB(IK) = 1
749a836
>       S_RSN(IK) = REAL(RS(I)*RSCALE_OUT)
756,758c843,865
< C      S_F1(IK) = F(1,I)
< C      S_F2(IK) = F(2,I)
< C      S_F3(IK) = F(3,I)
---
>       S_F1(IK) = REAL(F(1,I)*FSCALE_OUT) 
>       S_F2(IK) = REAL(F(2,I)*FSCALE_OUT) 
>       S_F3(IK) = REAL(F(3,I)*FSCALE_OUT) 
>       S_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
>       S_FD1(IK) = REAL(FDOT(1,I)*FDSCALE_OUT)
>       S_FD2(IK) = REAL(FDOT(2,I)*FDSCALE_OUT)
>       S_FD3(IK) = REAL(FDOT(3,I)*FDSCALE_OUT)
>       S_D21(IK) = REAL(F2DOT(1)*D2SCALE_OUT)
>       S_D22(IK) = REAL(F2DOT(2)*D2SCALE_OUT)
>       S_D23(IK) = REAL(F2DOT(3)*D2SCALE_OUT)
>       S_D31(IK) = REAL(F3DOT(1)*D3SCALE_OUT)
>       S_D32(IK) = REAL(F3DOT(2)*D3SCALE_OUT)
>       S_D33(IK) = REAL(F3DOT(3)*D3SCALE_OUT)
>       S_STEP(IK) = REAL(STEP(I))
>       S_STEPR(IK) = REAL(STEPR(I))
>       S_T0(IK) = REAL(T0(I))
>       S_T0R(IK) = REAL(T0R(I))
> 
> *     if(rank.eq.0)print*,' css i,ik,d2,d3,d2sc,d3sc=',
> *    &  i,ik,s_d21(1),s_d31(1),d2scale_out,d3scale_out
> *     if(rank.eq.0)print*,' css i,ik,f2,f3=',
> *    &  i,ik,f2dot(1),f3dot(1)
> 
771c878
<      &     XIREL,VIREL,KC)
---
>      &     XIREL,VIREL,KC,GI)
778,814c885,892
< *     Binary
<       COMMON/OUTBINARY/ B_M1(KMAX), B_M2(KMAX),
<      &                  B_XC1(KMAX), B_XC2(KMAX), B_XC3(KMAX),
<      &                  B_VC1(KMAX), B_VC2(KMAX), B_VC3(KMAX), 
<      &                  B_XR1(KMAX), B_XR2(KMAX), B_XR3(KMAX), 
<      &                  B_VR1(KMAX), B_VR2(KMAX), B_VR3(KMAX), 
< C     &                  B_FC1(KMAX), B_FC2(KMAX), B_FC3(KMAX), 
<      &                  B_RS1(KMAX), B_L1(KMAX), B_TE1(KMAX),
<      &                  B_RS2(KMAX), B_L2(KMAX), B_TE2(KMAX),
<      &                  B_RC1(KMAX), B_MC1(KMAX), B_RC2(KMAX), 
<      &                  B_MC2(KMAX), B_A(KMAX), B_ECC(KMAX), B_P(KMAX),
<      &                  NB_KW1(KMAX), NB_NAM1(KMAX), NB_KW2(KMAX), 
<      &                  NB_NAM2(KMAX), NB_KWC(KMAX), NB_NAMC(KMAX)
<       REAL*4 B_M1, B_M2, B_XC1, B_XC2, B_XC3, B_VC1, B_VC2, B_VC3
<       REAL*4 B_XR1, B_XR2, B_XR3, B_VR1, B_VR2, B_VR3
< C      REAL*4 B_FC1, B_FC2, B_FC3
<       REAL*4 B_RS1, B_L1, B_TE1, B_RS2, B_L2, B_TE2
<       REAL*4 B_RC1, B_MC1, B_RC2, B_MC2,B_A, B_ECC, B_P
<       INTEGER NB_KW1, NB_NAM1, NB_KW2, NB_NAM2, NB_KWC, NB_NAMC
< 
<       REAL*8 XIREL(3), VIREL(3), M1, M2, MTMP,MCM,RDOT
<       REAL*8 RSCALE_OUT,MSCALE_OUT,VSCALE_OUT,RAU_OUT,TSCALE_OUT
<       IF (KZ(19).EQ.0.AND.KZ(12).EQ.-1) THEN
<          RSCALE_OUT=1.0
<          MSCALE_OUT=1.0
<          VSCALE_OUT=1.0
<          RAU_OUT=1.0
<          TSCALE_OUT=1.0
<       else
<          RSCALE_OUT=RBAR
<          MSCALE_OUT=ZMBAR
<          VSCALE_OUT=VSTAR
<          RAU_OUT=RAU
<          TSCALE_OUT=TSTAR
<       END IF
< 
< 
---
>       include 'output_binary.h'
>       include 'scale_out.h'
>       COMMON/POTDEN/  RHO(NMAX),XNDBL(NMAX),PHIDBL(NMAX)
> 
> C*     Binary
>       REAL*8 XIREL(3), VIREL(3), M1, M2, MTMP,MCM,RDOT,GI
>       REAL*8 F2DOT(3),F3DOT(3),ONE24,ONE120,S,DTR
>       PARAMETER  (ONE24=1.0/24.0D0,ONE120=1.0/120.0D0)
818a897,904
> *
>           S = TIME - T0(I)
>           DTR = TIME - T0R(I)
> *      Store F2DOT, F3DOT ready for Taylor series with factor as F,FDOT
>       DO 30 K = 1,3
>           F2DOT(K) = ONE24*(D3R(K,I)*DTR+D2R(K,I) + D3(K,I)*S+D2(K,I))
>           F3DOT(K) = ONE120*(D3R(K,I) + D3(K,I))
>  30   CONTINUE
828,830c914,928
<       B_XR1(IK) = REAL(XIREL(1)*RAU_OUT) 
<       B_XR2(IK) = REAL(XIREL(2)*RAU_OUT) 
<       B_XR3(IK) = REAL(XIREL(3)*RAU_OUT) 
---
>       B_FC1(IK) = REAL(F(1,I)*FSCALE_OUT)
>       B_FC2(IK) = REAL(F(2,I)*FSCALE_OUT)
>       B_FC3(IK) = REAL(F(3,I)*FSCALE_OUT)
>       B_FDC1(IK) = REAL(FDOT(1,I)*FDSCALE_OUT)
>       B_FDC2(IK) = REAL(FDOT(2,I)*FDSCALE_OUT)
>       B_FDC3(IK) = REAL(FDOT(3,I)*FDSCALE_OUT)
>       B_D21(IK) = REAL(F2DOT(1)*D2SCALE_OUT)
>       B_D22(IK) = REAL(F2DOT(2)*D2SCALE_OUT)
>       B_D23(IK) = REAL(F2DOT(3)*D2SCALE_OUT)
>       B_D31(IK) = REAL(F3DOT(1)*D3SCALE_OUT)
>       B_D32(IK) = REAL(F3DOT(2)*D3SCALE_OUT)
>       B_D33(IK) = REAL(F3DOT(3)*D3SCALE_OUT)
>       B_XR1(IK) = REAL(XIREL(1)*RSCALE_OUT) 
>       B_XR2(IK) = REAL(XIREL(2)*RSCALE_OUT) 
>       B_XR3(IK) = REAL(XIREL(3)*RSCALE_OUT) 
834,836c932,941
< C      B_FC1(IK) =REAL( F(1,I)
< C      B_FC2(IK) = F(2,I)
< C      B_FC3(IK) = F(3,I)
---
>       B_FC1(IK) = REAL(F(1,I)*FSCALE_OUT)
>       B_FC2(IK) = REAL(F(2,I)*FSCALE_OUT)
>       B_FC3(IK) = REAL(F(3,I)*FSCALE_OUT)
>       B_POT(IK) = REAL(-PHIDBL(I)*POTSCALE_OUT)
>       B_G(IK)   = REAL(GI)
>       B_STEP(IK) = REAL(STEP(I))
>       B_STEPR(IK) = REAL(STEPR(I))
>       B_T0(IK) = REAL(T0(I))
>       B_T0R(IK) = REAL(T0R(I))
> 
